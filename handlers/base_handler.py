"""–ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–±—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""

from typing import Any
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes
import logging

from core.registry import registry
from models.base import User

logger = logging.getLogger(__name__)

class BaseHandler:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –æ–±—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏."""
    
    def __init__(self):
        self.registry = registry
    
    def get_service(self, name: str) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞."""
        try:
            return self.registry.get(name)
        except Exception as e:
            logger.warning(f"–°–µ—Ä–≤–∏—Å {name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return None
    
    def get_user_from_update(self, update: Update) -> User:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç User –∏–∑ Update - –æ–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
        tg_user = update.effective_user
        
        return User(
            id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
            language_code=tg_user.language_code,
            created_at=datetime.now(),
            last_seen=datetime.now(),
            is_premium=getattr(tg_user, 'is_premium', False)
        )
    
    async def log_interaction(self, update: Update, action: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ."""
        user = update.effective_user
        logger.info(
            f"User {user.id} ({user.first_name}): {action}",
            extra={
                "user_id": user.id,
                "action": action,
                **kwargs
            }
        )
    
    async def send_typing_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ø–µ—á–∞—Ç–∞–µ—Ç'."""
        try:
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id,
                action="typing"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing action: {e}")
    
    def get_template_response_fallback(self, message: str, user_name: str = "") -> str:
        """Fallback —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
        import random
        
        message_lower = message.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "hello"]):
            responses = [
                f"–ü—Ä–∏–≤–µ—Ç{f', {user_name}' if user_name else ''}! üòä",
                f"–•–µ–ª–ª–æ—É{f', {user_name}' if user_name else ''}! üëã"
            ]
        elif any(word in message_lower for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–±–∞–π"]):
            responses = [
                "–ü–æ–∫–∞! üëã –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
                "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üòä"
            ]
        elif any(word in message_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é"]):
            responses = [
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä",
                "–ù–µ –∑–∞ —á—Ç–æ! üí´"
            ]
        else:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üòä –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ!",
                "–ö–ª–∞—Å—Å–Ω–æ! ‚ú® –ê —á—Ç–æ –µ—â–µ?",
                "–°—É–ø–µ—Ä! üéâ –Ø —Å–ª—É—à–∞—é!"
            ]
        
        return random.choice(responses)