"""–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å dependency injection."""

import logging
from typing import Any, Optional
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from models.base import User
from core.service_initializer import ServiceUtils

logger = logging.getLogger(__name__)

class ImprovedBaseHandler:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å dependency injection."""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ServiceUtils –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ registry
        self.service_utils = ServiceUtils
    
    # === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã ===
    
    def get_storage_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        return self.service_utils.get_storage_service()
    
    def get_character_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return self.service_utils.get_character_service()
    
    def get_llm_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç LLM —Å–µ—Ä–≤–∏—Å."""
        return self.service_utils.get_llm_service()
    
    def get_image_service(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        return self.service_utils.get_image_service()
    
    # === –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ ===
    
    def is_llm_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM."""
        return self.service_utils.is_llm_available()
    
    def is_image_generation_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        return self.service_utils.is_image_generation_available()
    
    # === –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã ===
    
    def get_user_from_update(self, update: Update) -> User:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç User –∏–∑ Update."""
        tg_user = update.effective_user
        
        return User(
            id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
            language_code=tg_user.language_code,
            created_at=datetime.now(),
            last_seen=datetime.now(),
            is_premium=getattr(tg_user, 'is_premium', False)
        )
    
    async def log_interaction(self, update: Update, action: str, **kwargs):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ."""
        user = update.effective_user
        logger.info(
            f"üë§ User {user.id} ({user.first_name}): {action}",
            extra={
                "user_id": user.id,
                "action": action,
                **kwargs
            }
        )
    
    async def send_typing_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ '–ø–µ—á–∞—Ç–∞–µ—Ç'."""
        try:
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id,
                action="typing"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å typing action: {e}")
    
    def get_error_response(self, error_type: str = "general") -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—à–∏–±–∫—É –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ fallback."""
        character_service = self.get_character_service()
        
        if character_service and hasattr(character_service, 'get_error_responses'):
            import random
            error_responses = character_service.get_error_responses()
            return random.choice(error_responses)
        
        # Fallback –æ—Ç–≤–µ—Ç—ã –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
        fallback_responses = {
            "general": "–£–ø—Å! üôà –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!",
            "llm_unavailable": "üß† LLM —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –æ—Ç–≤–µ—á–∞—é –ø–æ —à–∞–±–ª–æ–Ω–∞–º",
            "image_unavailable": "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            "service_error": "‚öôÔ∏è –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "validation_error": "üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
        }
        
        return fallback_responses.get(error_type, fallback_responses["general"])
    
    def get_template_response_fallback(self, message: str, user_name: str = "") -> str:
        """Fallback —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."""
        import random
        
        message_lower = message.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ —à–∞–±–ª–æ–Ω—ã —Å —ç–º–æ–¥–∑–∏
        if any(word in message_lower for word in ["–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "hello", "–π–æ"]):
            responses = [
                f"–ü—Ä–∏–≤–µ—Ç{f', {user_name}' if user_name else ''}! üòä –ö–∞–∫ –¥–µ–ª–∞?",
                f"–•–µ–ª–ª–æ—É{f', {user_name}' if user_name else ''}! üëã –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
                f"–ô–æ{f', {user_name}' if user_name else ''}! ü§ó –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
            ]
        elif any(word in message_lower for word in ["–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è", "–±–∞–π"]):
            responses = [
                "–ü–æ–∫–∞! üëã –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
                "–î–æ –≤—Å—Ç—Ä–µ—á–∏! üòä –ó–∞—Ö–æ–¥–∏ –µ—â–µ!",
                "–ë–∞–π-–±–∞–π! üåü –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
            ]
        elif any(word in message_lower for word in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é", "–ø–∞—Å–∏–±–æ"]):
            responses = [
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä –í—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å!",
                "–ù–µ –∑–∞ —á—Ç–æ! üí´ –û–±—Ä–∞—â–∞–π—Å—è –µ—â–µ!",
                "–†–∞–¥–∞ –ø–æ–º–æ—á—å! üå∏"
            ]
        elif any(word in message_lower for word in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω"]):
            responses = [
                "–ù–µ –≥—Ä—É—Å—Ç–∏! ü§ó –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?",
                "–î–µ—Ä–∂–∏—Å—å! üí™ –í—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ!",
                "–Ø —Å —Ç–æ–±–æ–π! üåü –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω–µ —Ç–∞–∫?"
            ]
        elif any(word in message_lower for word in ["–æ—Ç–ª–∏—á–Ω–æ", "—Å—É–ø–µ—Ä", "–∫–ª–∞—Å—Å–Ω–æ", "–∫—Ä—É—Ç–æ"]):
            responses = [
                "–í–∞—É, –∑–¥–æ—Ä–æ–≤–æ! üéâ –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ!",
                "–ö–ª–∞—Å—Å–Ω–æ! ‚ú® –Ø —Ä–∞–¥–∞ –∑–∞ —Ç–µ–±—è!",
                "–°—É–ø–µ—Ä! üåü –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
            ]
        else:
            responses = [
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üòä –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ!",
                "–ö–ª–∞—Å—Å–Ω–æ! ‚ú® –ê —á—Ç–æ –µ—â–µ?",
                "–í–∞—É! ü§© –≠—Ç–æ –∑–≤—É—á–∏—Ç –∫—Ä—É—Ç–æ!",
                "–°—É–ø–µ—Ä! üéâ –Ø —Å–ª—É—à–∞—é!",
                "–ö—Ä—É—Ç–æ! üåü –ü—Ä–æ–¥–æ–ª–∂–∞–π!"
            ]
        
        return random.choice(responses)
    
    async def safe_reply(self, update: Update, text: str, 
                        parse_mode: Optional[str] = None) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            await update.message.reply_text(text, parse_mode=parse_mode)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞")
                return False
            except Exception as e2:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e2}")
                return False
    
    def validate_message_length(self, text: str, max_length: int = 4000) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è."""
        return len(text) <= max_length
    
    def sanitize_text_input(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        # –£–±–∏—Ä–∞–µ–º —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–∞–±—É–ª—è—Ü–∏–∏
        import re
        cleaned = re.sub(r'[\x00-\x08\x0B-\x0C\x0E-\x1F\x7F]', '', text)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(cleaned) > 4000:
            cleaned = cleaned[:4000] + "..."
        
        return cleaned.strip()
    
    async def handle_service_unavailable(self, update: Update, service_name: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
        error_message = self.get_error_response("service_error")
        logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {service_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
        await self.safe_reply(update, f"{error_message}\n\n–°–µ—Ä–≤–∏—Å '{service_name}' –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
    
    def get_services_status_summary(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        return self.service_utils.get_service_health()