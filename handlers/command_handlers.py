"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥."""

import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from handlers.base_handler import BaseHandler
from models.base import User

logger = logging.getLogger(__name__)

class CommandHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        user = self._get_user_from_update(update)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_service = self.get_service('character')
        
        if character_service:
            welcome_message = character_service.get_welcome_message(user)
        else:
            welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üåü –Ø –ê–ª–∏—Å–∞, —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞!"
        
        await update.message.reply_text(welcome_message)
        await self.log_interaction(update, "start_command")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        llm_service = self.get_service('llm')
        image_service = self.get_service('image')
        
        commands = [
            "/start - –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å–æ –º–Ω–æ–π",
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ"
        ]
        
        if llm_service and getattr(llm_service, 'is_available', False):
            commands.extend([
                "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞",
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"
            ])
        
        if image_service and getattr(image_service, 'is_initialized', False):
            commands.extend([
                "/image <–æ–ø–∏—Å–∞–Ω–∏–µ> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            ])
        
        help_text = f"""ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏—Å–∞, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
{chr(10).join(commands)}

üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –æ—Ç–≤–µ—á—É!

{'üß† –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ LLM –∞–∫—Ç–∏–≤–Ω—ã' if llm_service and getattr(llm_service, 'is_available', False) else 'üìù –†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ —à–∞–±–ª–æ–Ω–æ–≤'}
{'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞' if image_service and getattr(image_service, 'is_initialized', False) else ''}"""
        
        await update.message.reply_text(help_text)
        await self.log_interaction(update, "help_command")
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /info."""
        character_service = self.get_service('character')
        
        if character_service and hasattr(character_service, 'get_info'):
            info_text = character_service.get_info()
        else:
            info_text = """üåü –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞!

–û —Å–µ–±–µ:
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞
‚Ä¢ –õ—é–±–ª—é –æ–±—â–∞—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å
‚Ä¢ –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å
‚Ä¢ –û–±–æ–∂–∞—é —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ

–î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å! ü§ó"""
        
        await update.message.reply_text(info_text)
        await self.log_interaction(update, "info_command")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats."""
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–æ–≤
        stats_lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:\n"]
        
        # LLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        llm_service = self.get_service('llm')
        if llm_service:
            if hasattr(llm_service, 'is_available') and llm_service.is_available:
                model_name = getattr(llm_service, 'model_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                stats_lines.append(f"üß† LLM: ‚úÖ {model_name}")
            else:
                stats_lines.append("üß† LLM: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        else:
            stats_lines.append("üß† LLM: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_service = self.get_service('image')
        if image_service:
            if hasattr(image_service, 'is_initialized') and image_service.is_initialized:
                model_path = getattr(image_service, 'model_path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                stats_lines.append(f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚úÖ {model_path}")
            else:
                stats_lines.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ")
        else:
            stats_lines.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_service = self.get_service('storage')
        if storage_service and hasattr(storage_service, 'get_stats'):
            try:
                storage_stats = storage_service.get_stats()
                total_conversations = storage_stats.get('total_conversations', 0)
                stats_lines.append(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚úÖ {total_conversations} –¥–∏–∞–ª–æ–≥–æ–≤")
            except:
                stats_lines.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚ö†Ô∏è –û—à–∏–±–∫–∞")
        else:
            stats_lines.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
        
        stats_text = "\n".join(stats_lines)
        await update.message.reply_text(stats_text)
        await self.log_interaction(update, "stats_command")
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é."""
        user = self._get_user_from_update(update)
        
        storage_service = self.get_service('storage')
        if storage_service and hasattr(storage_service, 'clear_conversation'):
            try:
                storage_service.clear_conversation(user.id)
                await update.message.reply_text("üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")
                await self.log_interaction(update, "history_cleared")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        else:
            await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    async def image_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /image <prompt>."""
        if not context.args:
            await update.message.reply_text(
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /image –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_service = self.get_service('image')
        if not image_service:
            await update.message.reply_text("‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not getattr(image_service, 'is_initialized', False):
            await update.message.reply_text("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        prompt_text = " ".join(context.args)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await update.message.reply_text(
            "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            from services.image.base_generator import ImagePrompt
            prompt = ImagePrompt(
                text=prompt_text,
                size=(512, 512),
                steps=20
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            result = await image_service.generate(prompt)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(result.image_path, 'rb') as image_file:
                await update.message.reply_photo(
                    photo=image_file,
                    caption=f"üé® –ü—Ä–æ–º–ø—Ç: {prompt_text}\n‚è±Ô∏è –í—Ä–µ–º—è: {result.generation_time:.1f}—Å"
                )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.delete()
            
            await self.log_interaction(
                update, "image_generated", 
                prompt=prompt_text, 
                time=result.generation_time
            )
            
        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def _get_user_from_update(self, update: Update) -> User:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç User –∏–∑ Update."""
        tg_user = update.effective_user
        
        return User(
            id=tg_user.id,
            username=tg_user.username,
            first_name=tg_user.first_name,
            last_name=tg_user.last_name,
            language_code=tg_user.language_code,
            created_at=datetime.now(),
            last_seen=datetime.now(),
            is_premium=getattr(tg_user, 'is_premium', False)
        )