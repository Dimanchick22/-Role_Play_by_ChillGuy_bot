"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–æ–ª—å-–ø–ª–µ–µ–º."""

import logging
from telegram import Update
from telegram.ext import ContextTypes

from handlers.base_handler import ImprovedBaseHandler
from core.registry import registry
from models.base import MessageRole

logger = logging.getLogger(__name__)

class CommandHandlers(ImprovedBaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        user = self.get_user_from_update(update)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        character_service = self.get_character_service()
        
        if character_service:
            welcome_message = character_service.get_welcome_message(user)
        else:
            welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üåü –Ø –ê–ª–∏—Å–∞, —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞!"
        
        await self.safe_reply(update, welcome_message)
        await self.log_interaction(update, "start_command")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        commands = [
            "/start - –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å–æ –º–Ω–æ–π",
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ"
        ]
        
        # –†–æ–ª—å-–ø–ª–µ–π –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
        character_service = self.get_character_service()
        if character_service and hasattr(character_service, 'mood'):
            commands.extend([
                "/mood - –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
                "/scene - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω—É –æ–±—â–µ–Ω–∏—è",
                "/rpstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–ª—å-–ø–ª–µ—è"
            ])
        
        if self.is_llm_available():
            commands.extend([
                "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞",
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"
            ])
        
        if self.is_image_generation_available():
            commands.extend([
                "/image <–æ–ø–∏—Å–∞–Ω–∏–µ> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            ])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–æ—Ç–∞
        if character_service and hasattr(character_service, 'mood'):
            bot_type = "üé≠ –†–æ–ª—å-–ø–ª–µ–π —Ä–µ–∂–∏–º: –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            extra_info = "\nüí° –Ø –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—é —Å –≤–æ–ø—Ä–æ—Å–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ—Å–µ–¥—É!"
        else:
            bot_type = "ü§ñ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º"
            extra_info = ""
        
        help_text = f"""ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏—Å–∞, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
{chr(10).join(commands)}

üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –æ—Ç–≤–µ—á—É!

{bot_type}
{'üß† –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ LLM –∞–∫—Ç–∏–≤–Ω—ã' if self.is_llm_available() else 'üìù –†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ —à–∞–±–ª–æ–Ω–æ–≤'}
{'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–≤–µ—Ç—É' if self.is_image_generation_available() else ''}{extra_info}"""
        
        await self.safe_reply(update, help_text)
        await self.log_interaction(update, "help_command")
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /info."""
        character_service = self.get_character_service()
        
        if character_service and hasattr(character_service, 'get_info'):
            info_text = character_service.get_info()
        elif character_service and hasattr(character_service, 'mood'):
            # –†–æ–ª—å-–ø–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂
            mood = getattr(character_service, 'mood', '–≤–µ—Å–µ–ª–∞—è')
            scene = getattr(character_service, 'current_scene', '–æ–±—ã—á–Ω–∞—è –±–µ—Å–µ–¥–∞')
            
            info_text = f"""üé≠ –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞!

–û —Å–µ–±–µ:
‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: 19 –ª–µ—Ç
‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä: {character_service.personality}
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å: {mood}
‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞: {scene}
‚Ä¢ –£–≤–ª–µ—á–µ–Ω–∏—è: –º—É–∑—ã–∫–∞, —Ñ–∏–ª—å–º—ã, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è

–Ø –æ–±–æ–∂–∞—é –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ –∏ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–∏–∞–ª–æ–≥ –≤–æ–ø—Ä–æ—Å–∞–º–∏! ü§ó

–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º! ‚ú®"""
        else:
            info_text = """üåü –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞!

–û —Å–µ–±–µ:
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞
‚Ä¢ –õ—é–±–ª—é –æ–±—â–∞—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å
‚Ä¢ –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å
‚Ä¢ –û–±–æ–∂–∞—é —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ

–î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å! ü§ó"""
        
        await self.safe_reply(update, info_text)
        await self.log_interaction(update, "info_command")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        services_health = self.get_services_status_summary()
        
        stats_lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:\n"]
        
        # LLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if services_health['llm']:
            llm_service = self.get_llm_service()
            model_name = getattr(llm_service, 'active_model', 
                               getattr(llm_service, 'model_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å-–ø–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if hasattr(llm_service, 'roleplay_settings'):
                temp = llm_service.roleplay_settings.get('temperature', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                stats_lines.append(f"üß† LLM: ‚úÖ {model_name} (—Ä–æ–ª—å-–ø–ª–µ–π, temp: {temp})")
            else:
                stats_lines.append(f"üß† LLM: ‚úÖ {model_name}")
        else:
            stats_lines.append("üß† LLM: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if services_health['image']:
            image_service = self.get_image_service()
            model_path = getattr(image_service, 'model_path', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            stats_lines.append(f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚úÖ {model_path}")
        else:
            stats_lines.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if services_health['storage']:
            storage_service = self.get_storage_service()
            if hasattr(storage_service, 'get_stats'):
                try:
                    storage_stats = storage_service.get_stats()
                    total_conversations = storage_stats.get('total_conversations', 0)
                    total_messages = storage_stats.get('total_messages', 0)
                    stats_lines.append(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚úÖ {total_conversations} –¥–∏–∞–ª–æ–≥–æ–≤, {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
                except:
                    stats_lines.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            else:
                stats_lines.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ")
        else:
            stats_lines.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
        
        stats_text = "\n".join(stats_lines)
        await self.safe_reply(update, stats_text)
        await self.log_interaction(update, "stats_command")
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é."""
        user = self.get_user_from_update(update)
        
        storage_service = self.get_storage_service()
        if storage_service and hasattr(storage_service, 'clear_conversation'):
            try:
                storage_service.clear_conversation(user.id)
                await self.safe_reply(update, "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")
                await self.log_interaction(update, "history_cleared")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                await self.safe_reply(update, self.get_error_response("service_error"))
        else:
            await self.safe_reply(update, "‚ùå –°–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    async def image_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /image <prompt>."""
        if not context.args:
            await self.safe_reply(
                update,
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /image –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not self.is_image_generation_available():
            await self.safe_reply(update, "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        image_service = self.get_image_service()
        prompt_text = " ".join(context.args)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
        if not self.validate_message_length(prompt_text, 500):
            await self.safe_reply(update, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥
        prompt_text = self.sanitize_text_input(prompt_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await update.message.reply_text(
            "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            from services.image.base_generator import ImagePrompt
            prompt = ImagePrompt(
                text=prompt_text,
                size=(512, 512),
                steps=20
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            result = await image_service.generate(prompt)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(result.image_path, 'rb') as image_file:
                await update.message.reply_photo(
                    photo=image_file,
                    caption=f"üé® –ü—Ä–æ–º–ø—Ç: {prompt_text}\n‚è±Ô∏è –í—Ä–µ–º—è: {result.generation_time:.1f}—Å"
                )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.delete()
            
            await self.log_interaction(
                update, "image_generated", 
                prompt=prompt_text, 
                time=result.generation_time
            )
            
        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await self.log_interaction(update, "image_generation_failed", error=str(e))


class RoleplayCommandHandlers:
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–æ–ª—å-–ø–ª–µ—è."""
    
    async def mood_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /mood - –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        character_service = registry.get('character', None)
        
        if not character_service:
            await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if not context.args:
            current_mood = getattr(character_service, 'mood', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            await update.message.reply_text(
                f"üé≠ –¢–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_mood}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:\n"
                "‚Ä¢ –≤–µ—Å–µ–ª–∞—è üòä\n‚Ä¢ –≥—Ä—É—Å—Ç–Ω–∞—è üò¢\n‚Ä¢ –∏–≥—Ä–∏–≤–∞—è üòè\n‚Ä¢ –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–∞—è üòÆ\n‚Ä¢ –∑–∞–¥—É–º—á–∏–≤–∞—è ü§î\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mood –≤–µ—Å–µ–ª–∞—è"
            )
            return
        
        new_mood = context.args[0].lower()
        valid_moods = ["–≤–µ—Å–µ–ª–∞—è", "–≥—Ä—É—Å—Ç–Ω–∞—è", "–∏–≥—Ä–∏–≤–∞—è", "–≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–∞—è", "–∑–∞–¥—É–º—á–∏–≤–∞—è"]
        
        if new_mood not in valid_moods:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {new_mood}\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_moods)}"
            )
            return
        
        # –ú–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        character_service.mood = new_mood
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
        mood_responses = {
            "–≤–µ—Å–µ–ª–∞—è": ("–£—Ä–∞! –¢–µ–ø–µ—Ä—å —è –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòä –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –∫–ª–∞—Å—Å–Ω–æ–º!", 
                       "cheerful young woman, bright smile, happy mood, energetic"),
            "–≥—Ä—É—Å—Ç–Ω–∞—è": ("–•–º, —Å—Ç–∞–ª–æ –Ω–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–Ω–æ... üò¢ –ú–æ–∂–µ—Ç, –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –¥—É—à–µ–≤–Ω–æ–º?", 
                        "melancholic young woman, thoughtful expression, soft lighting"),
            "–∏–≥—Ä–∏–≤–∞—è": ("–û–π, —è –≤ –∏–≥—Ä–∏–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏! üòè –î–∞–≤–∞–π –ø—Ä–∏–¥—É–º–∞–µ–º —á—Ç–æ-—Ç–æ –≤–µ—Å–µ–ª–æ–µ!", 
                       "playful young woman, mischievous smile, flirtatious mood"),
            "–≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–∞—è": ("–û–≥–æ, —è —Ç–∞–∫ –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–∞! üòÆ –ß—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç!", 
                            "excited young woman, surprised expression, energetic gesture"),
            "–∑–∞–¥—É–º—á–∏–≤–∞—è": ("–ú–º, —è –≤ –∑–∞–¥—É–º—á–∏–≤–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏... ü§î –û —á–µ–º –ø–æ—Ä–∞–∑–º—ã—à–ª—è–µ–º?", 
                          "contemplative young woman, thoughtful pose, philosophical mood")
        }
        
        response, image_prompt = mood_responses[new_mood]
        await update.message.reply_text(response)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        try:
            await self._generate_mood_image(update, context, image_prompt, new_mood)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
    
    async def scene_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /scene - –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ü–µ–Ω—É —Ä–æ–ª—å-–ø–ª–µ—è."""
        character_service = registry.get('character', None)
        
        if not character_service:
            await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if not context.args:
            current_scene = getattr(character_service, 'current_scene', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            await update.message.reply_text(
                f"üé¨ –¢–µ–∫—É—â–∞—è —Å—Ü–µ–Ω–∞: {current_scene}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω—ã:\n"
                "‚Ä¢ –∫–∞—Ñ–µ - —É—é—Ç–Ω–∞—è –±–µ—Å–µ–¥–∞ –≤ –∫–∞—Ñ–µ\n"
                "‚Ä¢ –ø–∞—Ä–∫ - –ø—Ä–æ–≥—É–ª–∫–∞ –≤ –ø–∞—Ä–∫–µ\n"
                "‚Ä¢ –¥–æ–º–∞ - –¥–æ–º–∞—à–Ω—è—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞\n"
                "‚Ä¢ –æ—Ñ–∏—Å - —Ä–∞–±–æ—á–∞—è –≤—Å—Ç—Ä–µ—á–∞\n"
                "‚Ä¢ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ - –≤ –¥–æ—Ä–æ–≥–µ\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /scene –∫–∞—Ñ–µ"
            )
            return
        
        new_scene = " ".join(context.args).lower()
        
        scene_responses = {
            "–∫–∞—Ñ–µ": ("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–µ–¥—Å—Ç–∞–≤—å, –º—ã —Å–∏–¥–∏–º –≤ —É—é—Ç–Ω–æ–º –∫–∞—Ñ–µ ‚òï –ß—Ç–æ –±—É–¥–µ—à—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å?", 
                    "young woman in cozy cafe, warm lighting, coffee atmosphere"),
            "–ø–∞—Ä–∫": ("–ö–∞–∫ –∑–¥–æ—Ä–æ–≤–æ! –ú—ã –≥—É–ª—è–µ–º –ø–æ –ø–∞—Ä–∫—É üå≥ –¢–∞–∫–∞—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞, –Ω–µ –ø—Ä–∞–≤–¥–∞ –ª–∏?", 
                    "young woman walking in park, natural lighting, outdoor setting"),
            "–¥–æ–º–∞": ("–ú–º, –¥–æ–º–∞—à–Ω—è—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞! üè† –£—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–µ, —á—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", 
                    "young woman at home, cozy interior, relaxed atmosphere"),
            "–æ—Ñ–∏—Å": ("–î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞! üíº –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ —Å —Ä–∞–±–æ—Ç–æ–π?", 
                    "young woman in office setting, professional atmosphere"),
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ": ("–û–≥–æ, –º—ã –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ–º! ‚úàÔ∏è –ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º—Å—è? –¢–∞–∫ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ!", 
                           "young woman traveling, adventure mood, journey atmosphere")
        }
        
        if new_scene not in scene_responses:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ü–µ–Ω–∞: {new_scene}\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(scene_responses.keys())}"
            )
            return
        
        # –ú–µ–Ω—è–µ–º —Å—Ü–µ–Ω—É
        character_service.current_scene = new_scene
        response, image_prompt = scene_responses[new_scene]
        
        await update.message.reply_text(response)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ü–µ–Ω—ã
        try:
            await self._generate_scene_image(update, context, image_prompt, new_scene)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω—ã: {e}")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /rpstats –¥–ª—è —Ä–æ–ª—å-–ø–ª–µ—è."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        character_service = registry.get('character', None)
        llm_service = registry.get('llm', None)
        storage_service = registry.get('storage', None)
        image_service = registry.get('image', None)
        
        stats_lines = ["üé≠ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–ª—å-–ø–ª–µ—è:\n"]
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        if character_service:
            mood = getattr(character_service, 'mood', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            scene = getattr(character_service, 'current_scene', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            relationship = getattr(character_service, 'relationship_level', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            stats_lines.append(f"üë© –ü–µ—Ä—Å–æ–Ω–∞–∂: ‚úÖ –ê–ª–∏—Å–∞")
            stats_lines.append(f"  ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}")
            stats_lines.append(f"  ‚Ä¢ –°—Ü–µ–Ω–∞: {scene}")
            stats_lines.append(f"  ‚Ä¢ –û—Ç–Ω–æ—à–µ–Ω–∏—è: {relationship}")
        else:
            stats_lines.append("üë© –ü–µ—Ä—Å–æ–Ω–∞–∂: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # LLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if llm_service and hasattr(llm_service, 'get_roleplay_stats'):
            llm_stats = llm_service.get_roleplay_stats()
            stats_lines.append(f"üß† LLM: ‚úÖ {llm_stats.get('model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            stats_lines.append(f"  ‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {llm_stats.get('temperature', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            stats_lines.append(f"  ‚Ä¢ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {llm_stats.get('max_tokens', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        elif llm_service:
            model_name = getattr(llm_service, 'active_model', 
                               getattr(llm_service, 'model_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            stats_lines.append(f"üß† LLM: ‚úÖ {model_name}")
        else:
            stats_lines.append("üß† LLM: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Ä–µ–∂–∏–º —à–∞–±–ª–æ–Ω–æ–≤)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if image_service and getattr(image_service, 'is_initialized', False):
            model_path = getattr(image_service, 'model_path', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            stats_lines.append(f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚úÖ {model_path}")
        else:
            stats_lines.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
        if storage_service:
            try:
                user = update.effective_user
                conversation = storage_service.get_conversation(user.id)
                message_count = len(conversation.messages)
                user_messages = len([m for m in conversation.messages if m.role == MessageRole.USER])
                
                stats_lines.append(f"üí¨ –î–∏–∞–ª–æ–≥:")
                stats_lines.append(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {message_count}")
                stats_lines.append(f"  ‚Ä¢ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_messages}")
                stats_lines.append(f"  ‚Ä¢ –°–æ–∑–¥–∞–Ω: {conversation.created_at.strftime('%d.%m.%Y %H:%M')}")
            except Exception:
                stats_lines.append("üí¨ –î–∏–∞–ª–æ–≥: ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        else:
            stats_lines.append("üí¨ –î–∏–∞–ª–æ–≥: ‚ùå –•—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        stats_text = "\n".join(stats_lines)
        await update.message.reply_text(stats_text)
    
    async def _generate_mood_image(self, update, context, image_prompt, mood):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."""
        image_service = registry.get('image', None)
        if not image_service or not getattr(image_service, 'is_initialized', False):
            return
        
        try:
            from services.image.base_generator import ImagePrompt
            
            prompt = ImagePrompt(
                text=f"{image_prompt}, {mood} mood, high quality, portrait",
                negative_prompt="ugly, distorted, blurry, low quality",
                size=(512, 512),
                steps=20
            )
            
            result = await image_service.generate(prompt)
            
            with open(result.image_path, 'rb') as image_file:
                await update.message.reply_photo(
                    photo=image_file,
                    caption=f"üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
    
    async def _generate_scene_image(self, update, context, image_prompt, scene):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ü–µ–Ω—ã."""
        image_service = registry.get('image', None)
        if not image_service or not getattr(image_service, 'is_initialized', False):
            return
        
        try:
            from services.image.base_generator import ImagePrompt
            
            prompt = ImagePrompt(
                text=f"{image_prompt}, {scene} setting, cinematic, high quality",
                negative_prompt="ugly, distorted, blurry, low quality",
                size=(512, 512),
                steps=25  # –ë–æ–ª—å—à–µ —à–∞–≥–æ–≤ –¥–ª—è —Å—Ü–µ–Ω
            )
            
            result = await image_service.generate(prompt)
            
            with open(result.image_path, 'rb') as image_file:
                await update.message.reply_photo(
                    photo=image_file,
                    caption=f"üé¨ –°—Ü–µ–Ω–∞: {scene}"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω—ã: {e}")