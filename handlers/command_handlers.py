"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""

import logging
from telegram import Update
from telegram.ext import ContextTypes

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
from handlers.base_handler import ImprovedBaseHandler

logger = logging.getLogger(__name__)

class CommandHandlers(ImprovedBaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        user = self.get_user_from_update(update)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        character_service = self.get_character_service()
        
        if character_service:
            welcome_message = character_service.get_welcome_message(user)
        else:
            welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üåü –Ø –ê–ª–∏—Å–∞, —Ç–≤–æ—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞!"
        
        await self.safe_reply(update, welcome_message)
        await self.log_interaction(update, "start_command")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        commands = [
            "/start - –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å–æ –º–Ω–æ–π",
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞",
            "/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ"
        ]
        
        if self.is_llm_available():
            commands.extend([
                "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞",
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã"
            ])
        
        if self.is_image_generation_available():
            commands.extend([
                "/image <–æ–ø–∏—Å–∞–Ω–∏–µ> - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            ])
        
        help_text = f"""ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

–ü—Ä–∏–≤–µ—Ç! –Ø –ê–ª–∏—Å–∞, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
{chr(10).join(commands)}

üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –æ—Ç–≤–µ—á—É!

{'üß† –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ LLM –∞–∫—Ç–∏–≤–Ω—ã' if self.is_llm_available() else 'üìù –†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ —à–∞–±–ª–æ–Ω–æ–≤'}
{'üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞' if self.is_image_generation_available() else ''}"""
        
        await self.safe_reply(update, help_text)
        await self.log_interaction(update, "help_command")
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /info."""
        character_service = self.get_character_service()
        
        if character_service and hasattr(character_service, 'get_info'):
            info_text = character_service.get_info()
        else:
            info_text = """üåü –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–∏—Å–∞!

–û —Å–µ–±–µ:
‚Ä¢ –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞
‚Ä¢ –õ—é–±–ª—é –æ–±—â–∞—Ç—å—Å—è –∏ –ø–æ–º–æ–≥–∞—Ç—å
‚Ä¢ –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å
‚Ä¢ –û–±–æ–∂–∞—é —É–∑–Ω–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ

–î–∞–≤–∞–π –¥—Ä—É–∂–∏—Ç—å! ü§ó"""
        
        await self.safe_reply(update, info_text)
        await self.log_interaction(update, "info_command")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats."""
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        services_health = self.get_services_status_summary()
        
        stats_lines = ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:\n"]
        
        # LLM —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if services_health['llm']:
            llm_service = self.get_llm_service()
            model_name = getattr(llm_service, 'active_model', 
                               getattr(llm_service, 'model_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'))
            stats_lines.append(f"üß† LLM: ‚úÖ {model_name}")
        else:
            stats_lines.append("üß† LLM: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if services_health['image']:
            image_service = self.get_image_service()
            model_path = getattr(image_service, 'model_path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            stats_lines.append(f"üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚úÖ {model_path}")
        else:
            stats_lines.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–æ")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if services_health['storage']:
            storage_service = self.get_storage_service()
            if hasattr(storage_service, 'get_stats'):
                try:
                    storage_stats = storage_service.get_stats()
                    total_conversations = storage_stats.get('total_conversations', 0)
                    total_messages = storage_stats.get('total_messages', 0)
                    stats_lines.append(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚úÖ {total_conversations} –¥–∏–∞–ª–æ–≥–æ–≤, {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π")
                except:
                    stats_lines.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            else:
                stats_lines.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚úÖ –ê–∫—Ç–∏–≤–Ω–æ")
        else:
            stats_lines.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω")
        
        stats_text = "\n".join(stats_lines)
        await self.safe_reply(update, stats_text)
        await self.log_interaction(update, "stats_command")
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é."""
        user = self.get_user_from_update(update)
        
        storage_service = self.get_storage_service()
        if storage_service and hasattr(storage_service, 'clear_conversation'):
            try:
                storage_service.clear_conversation(user.id)
                await self.safe_reply(update, "üßπ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")
                await self.log_interaction(update, "history_cleared")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                await self.safe_reply(update, self.get_error_response("service_error"))
        else:
            await self.safe_reply(update, "‚ùå –°–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    async def image_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /image <prompt>."""
        if not context.args:
            await self.safe_reply(
                update,
                "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /image <–æ–ø–∏—Å–∞–Ω–∏–µ>\n\n"
                "–ü—Ä–∏–º–µ—Ä: /image –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if not self.is_image_generation_available():
            await self.safe_reply(update, "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        image_service = self.get_image_service()
        prompt_text = " ".join(context.args)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
        if not self.validate_message_length(prompt_text, 500):
            await self.safe_reply(update, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –û—á–∏—â–∞–µ–º –≤–≤–æ–¥
        prompt_text = self.sanitize_text_input(prompt_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_message = await update.message.reply_text(
            "üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
            from services.image.base_generator import ImagePrompt
            prompt = ImagePrompt(
                text=prompt_text,
                size=(512, 512),
                steps=20
            )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            result = await image_service.generate(prompt)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            with open(result.image_path, 'rb') as image_file:
                await update.message.reply_photo(
                    photo=image_file,
                    caption=f"üé® –ü—Ä–æ–º–ø—Ç: {prompt_text}\n‚è±Ô∏è –í—Ä–µ–º—è: {result.generation_time:.1f}—Å"
                )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await status_message.delete()
            
            await self.log_interaction(
                update, "image_generated", 
                prompt=prompt_text, 
                time=result.generation_time
            )
            
        except Exception as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await self.log_interaction(update, "image_generation_failed", error=str(e))