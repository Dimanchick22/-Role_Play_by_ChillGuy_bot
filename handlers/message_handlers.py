"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""

import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ContextTypes

from handlers.base_handler import BaseHandler
from models.base import BaseMessage, MessageType, MessageRole

logger = logging.getLogger(__name__)

class MessageHandlers(BaseHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        user = self.get_user_from_update(update)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥
        message_text = update.message.text
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await self.send_typing_action(update, context)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            llm_service = self.get_service('llm')
            storage_service = self.get_service('storage')
            character_service = self.get_service('character')
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message = BaseMessage(
                id=str(update.message.message_id),
                content=message_text,
                role=MessageRole.USER,
                message_type=MessageType.TEXT,
                timestamp=datetime.now(),
                metadata={"user_id": user.id}
            )
            
            # –†–∞–±–æ—Ç–∞–µ–º —Å –∏—Å—Ç–æ—Ä–∏–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            if storage_service and hasattr(storage_service, 'get_conversation'):
                try:
                    conversation = storage_service.get_conversation(user.id)
                    conversation.add_message(user_message)
                    recent_messages = conversation.get_recent_messages()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º: {e}")
                    recent_messages = [user_message]
            else:
                recent_messages = [user_message]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text, used_llm = await self._generate_response(
                llm_service, character_service, recent_messages, user, message_text
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot_message = BaseMessage(
                id=f"bot_{datetime.now().timestamp()}",
                content=response_text,
                role=MessageRole.ASSISTANT,
                message_type=MessageType.TEXT,
                timestamp=datetime.now(),
                metadata={"generated_by": "llm" if used_llm else "template"}
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            if storage_service and hasattr(storage_service, 'save_conversation'):
                try:
                    conversation.add_message(bot_message)
                    storage_service.save_conversation(conversation)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(response_text)
            
            await self.log_interaction(
                update, "text_processed",
                response_length=len(response_text),
                used_llm=used_llm
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await self._send_error_response(update, character_service)
    
    async def _generate_response(self, llm_service, character_service, 
                               recent_messages, user, message_text) -> tuple[str, bool]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è LLM –∏–ª–∏ —à–∞–±–ª–æ–Ω—ã."""
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM
        if llm_service and getattr(llm_service, 'is_available', False):
            try:
                response_text = await llm_service.generate_response(
                    messages=recent_messages,
                    user=user
                )
                return response_text, True
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ LLM, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —à–∞–±–ª–æ–Ω—ã: {e}")
        
        # Fallback –Ω–∞ —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if character_service and hasattr(character_service, 'get_template_response'):
            response_text = character_service.get_template_response(
                message_text, user.first_name
            )
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ fallback –æ—Ç–≤–µ—Ç—ã
            response_text = self.get_template_response_fallback(
                message_text, user.first_name
            )
        
        return response_text, False
    
    async def _send_error_response(self, update: Update, character_service):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        try:
            if character_service and hasattr(character_service, 'get_error_responses'):
                import random
                error_responses = character_service.get_error_responses()
                error_message = random.choice(error_responses)
            else:
                error_message = "–£–ø—Å! üôà –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
            
            await update.message.reply_text(error_message)
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")