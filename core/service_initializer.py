"""–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤."""

import logging
from typing import Dict, Any, List

from config.settings import AppConfig
from core.registry import registry

logger = logging.getLogger(__name__)

class ServiceInitializer:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
    
    def __init__(self, config: AppConfig):
        self.config = config
        self.initialized_services: List[str] = []
    
    def initialize_all(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
        logger.info("üîß –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–∞–∂–µ–Ω - —Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        services_to_init = [
            ('storage', self._init_storage_service),
            ('character', self._init_character_service),
            ('llm', self._init_llm_service),
            ('image', self._init_image_service),
            ('handlers', self._init_handlers)
        ]
        
        success_count = 0
        for service_name, init_func in services_to_init:
            try:
                if init_func():
                    self.initialized_services.append(service_name)
                    success_count += 1
                    logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å '{service_name}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å '{service_name}' –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ '{service_name}': {e}")
        
        total_required = len([s for s in services_to_init if s[0] in ['storage', 'character', 'handlers']])
        required_success = len([s for s in self.initialized_services if s in ['storage', 'character', 'handlers']])
        
        logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {success_count}/{len(services_to_init)}")
        
        return required_success == total_required
    
    def _init_storage_service(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        try:
            from services.storage.memory_storage import MemoryStorage
            
            storage = MemoryStorage(
                max_conversations=self.config.storage.max_conversations
            )
            
            registry.register('storage', storage)
            logger.debug("üíæ –°–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
            return False
    
    def _init_character_service(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        try:
            from characters.alice import AliceCharacter
            
            character = AliceCharacter()
            registry.register('character', character)
            logger.debug("üë© –ü–µ—Ä—Å–æ–Ω–∞–∂ –ê–ª–∏—Å–∞ —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            return False
    
    def _init_llm_service(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LLM —Å–µ—Ä–≤–∏—Å."""
        if self.config.llm.provider == "none":
            logger.info("üß† LLM —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return True
        
        try:
            if self.config.llm.provider == "ollama":
                from services.llm.ollama_client import OllamaClient
                
                llm = OllamaClient(
                    model_name=self.config.llm.model_name,
                    temperature=self.config.llm.temperature,
                    max_tokens=self.config.llm.max_tokens
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                if llm.is_available:
                    registry.register('llm', llm)
                    logger.debug(f"üß† LLM —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω: {getattr(llm, 'active_model', llm.model_name)}")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM")
                    return False
            
            else:
                logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.config.llm.provider}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞: {e}")
            return False
    
    def _init_image_service(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        if not self.config.image.enabled:
            logger.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return True
        
        try:
            if self.config.image.provider == "stable_diffusion":
                # –ü–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞, —Ç.–∫. —Ç—Ä–µ–±—É–µ—Ç async –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                logger.warning("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç async –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–æ—Ç–ª–æ–∂–µ–Ω–∞)")
                return True
            else:
                logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.config.image.provider}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return False
    
    def _init_handlers(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            from handlers.command_handlers import CommandHandlers
            from handlers.message_handlers import MessageHandlers
            
            command_handlers = CommandHandlers()
            message_handlers = MessageHandlers()
            
            registry.register('command_handlers', command_handlers)
            registry.register('message_handlers', message_handlers)
            
            logger.debug("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            return False
    
    def get_initialization_report(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        return {
            "initialized_services": self.initialized_services,
            "total_services": 5,  # storage, character, llm, image, handlers
            "success_rate": len(self.initialized_services) / 5,
            "registry_services": registry.get_registered_services()
        }
    
    def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        for service_name in reversed(self.initialized_services):
            try:
                service = registry.get(service_name, None)
                if service and hasattr(service, 'cleanup'):
                    service.cleanup()
                logger.debug(f"‚úÖ –°–µ—Ä–≤–∏—Å {service_name} –æ—á–∏—â–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
        
        self.initialized_services.clear()