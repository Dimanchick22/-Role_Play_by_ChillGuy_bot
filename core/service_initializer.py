"""–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""

import logging
import os
from pathlib import Path
from typing import Dict, Any, List, Callable
from abc import ABC, abstractmethod

from config.settings import AppConfig
from core.registry import registry

logger = logging.getLogger(__name__)

class ServiceFactory(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤."""
    
    @abstractmethod
    def create_service(self, config: AppConfig) -> Any:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å."""
        pass
    
    @abstractmethod
    def get_dependencies(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
        pass
    
    @abstractmethod
    def is_required(self, config: AppConfig) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ—Ä–≤–∏—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º."""
        pass

class StorageServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
    
    def create_service(self, config: AppConfig) -> Any:
        from services.storage.memory_storage import MemoryStorage
        return MemoryStorage(max_conversations=config.storage.max_conversations)
    
    def get_dependencies(self) -> List[str]:
        return []  # –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    
    def is_required(self, config: AppConfig) -> bool:
        return True  # –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è

class CharacterServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    
    def create_service(self, config: AppConfig) -> Any:
        from characters.alice import AliceCharacter
        return AliceCharacter()
    
    def get_dependencies(self) -> List[str]:
        return []  # –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    
    def is_required(self, config: AppConfig) -> bool:
        return True  # –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è

class LLMServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞."""
    
    def create_service(self, config: AppConfig) -> Any:
        if config.llm.provider == "ollama":
            from services.llm.ollama_client import OllamaClient
            
            llm = OllamaClient(
                model_name=config.llm.model_name,
                temperature=config.llm.temperature,
                max_tokens=config.llm.max_tokens
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if not llm.is_available:
                logger.warning("‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return None
            
            return llm
        else:
            logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {config.llm.provider}")
            return None
    
    def get_dependencies(self) -> List[str]:
        return ['character']  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    
    def is_required(self, config: AppConfig) -> bool:
        return config.llm.provider != "none"

class ImageServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    
    def create_service(self, config: AppConfig) -> Any:
        if config.image.provider == "stable_diffusion":
            model_path = config.image.model_path
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–æ–∫–∞–ª—å–Ω–∞—è –ª–∏ –º–æ–¥–µ–ª—å
            is_local_model = (
                model_path.endswith('.safetensors') or 
                model_path.endswith('.ckpt') or 
                model_path.startswith('./') or 
                model_path.startswith('../') or
                model_path.startswith('/') or
                (len(model_path) > 1 and model_path[1] == ':')  # Windows –ø—É—Ç—å —Ç–∏–ø–∞ C:\
            )
            
            if is_local_model:
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å: {model_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if model_path.startswith('./'):
                    full_path = Path(model_path).resolve()
                else:
                    full_path = Path(model_path)
                
                if not full_path.exists():
                    logger.error(f"‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {full_path}")
                    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–æ–¥–µ–ª—å")
                    model_path = "runwayml/stable-diffusion-v1-5"
                    is_local_model = False
                else:
                    logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {full_path}")
                    model_path = str(full_path)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            if is_local_model:
                from services.image.stable_diffusion import LocalStableDiffusionGenerator
                return LocalStableDiffusionGenerator(
                    model_path=model_path,
                    output_dir=config.image.output_dir,
                    safety_check=config.image.safety_check
                )
            else:
                from services.image.stable_diffusion import StableDiffusionGenerator
                return StableDiffusionGenerator(
                    model_path=model_path,
                    output_dir=config.image.output_dir,
                    safety_check=config.image.safety_check
                )
        else:
            logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {config.image.provider}")
            return None
    
    def get_dependencies(self) -> List[str]:
        return []  # –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    
    def is_required(self, config: AppConfig) -> bool:
        return config.image.enabled

class HandlerServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    
    def create_service(self, config: AppConfig) -> Dict[str, Any]:
        from handlers.command_handlers import CommandHandlers
        from handlers.message_handlers import MessageHandlers
        
        return {
            'command_handlers': CommandHandlers(),
            'message_handlers': MessageHandlers()
        }
    
    def get_dependencies(self) -> List[str]:
        return ['storage', 'character']  # –ó–∞–≤–∏—Å—è—Ç –æ—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    
    def is_required(self, config: AppConfig) -> bool:
        return True  # –í—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è

class ImprovedServiceInitializer:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∞–±—Ä–∏–∫."""
    
    def __init__(self, config: AppConfig):
        self.config = config
        self.factories: Dict[str, ServiceFactory] = {
            'storage': StorageServiceFactory(),
            'character': CharacterServiceFactory(),
            'llm': LLMServiceFactory(),
            'image': ImageServiceFactory(),
            'handlers': HandlerServiceFactory()
        }
        self.initialized_services: List[str] = []
    
    async def initialize_all(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫–∏."""
        logger.info("üîß –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫–∏...")
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
            self._register_all_services()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            success = await registry.initialize_all()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status = registry.get_registry_status()
            self.initialized_services = [
                name for name, info in status["services"].items() 
                if info["lifecycle"] == "ready"
            ]
            
            logger.info(f"üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(self.initialized_services)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            required_services = [
                name for name, factory in self.factories.items()
                if factory.is_required(self.config)
            ]
            
            missing_required = [
                name for name in required_services
                if name not in self.initialized_services
            ]
            
            if missing_required:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã: {missing_required}")
                return False
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def _register_all_services(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ."""
        for service_name, factory in self.factories.items():
            try:
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                def create_service(factory=factory):
                    service = factory.create_service(self.config)
                    if service is None:
                        raise RuntimeError(f"–§–∞–±—Ä–∏–∫–∞ –≤–µ—Ä–Ω—É–ª–∞ None –¥–ª—è {service_name}")
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å–µ—Ä–≤–∏—Å–æ–≤ (–∫–∞–∫ handlers), —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ
                    if isinstance(service, dict):
                        for sub_name, sub_service in service.items():
                            registry.register(sub_name, sub_service)
                        return service
                    
                    return service
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
                dependencies = factory.get_dependencies()
                
                # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è handlers (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω–æ)
                if service_name == 'handlers':
                    def create_handlers(factory=factory):
                        handlers_dict = factory.create_service(self.config)
                        if not isinstance(handlers_dict, dict):
                            raise RuntimeError(f"Handlers factory –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å dict")
                        
                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
                        for handler_name, handler_instance in handlers_dict.items():
                            registry.register(handler_name, handler_instance)
                        
                        return handlers_dict
                    
                    registry.register_factory(service_name, create_handlers, dependencies)
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ —Ñ–∞–±—Ä–∏–∫–∏
                    registry.register_factory(service_name, create_service, dependencies)
                
                logger.debug(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞ {service_name}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–±—Ä–∏–∫–∏ {service_name}: {e}")
                raise
    
    def get_initialization_report(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        registry_status = registry.get_registry_status()
        
        required_services = [
            name for name, factory in self.factories.items()
            if factory.is_required(self.config)
        ]
        
        optional_services = [
            name for name, factory in self.factories.items()
            if not factory.is_required(self.config)
        ]
        
        return {
            "initialized_services": self.initialized_services,
            "required_services": required_services,
            "optional_services": optional_services,
            "registry_status": registry_status,
            "success_rate": registry_status["ready_services"] / registry_status["total_services"] if registry_status["total_services"] > 0 else 0,
            "all_required_ready": all(
                name in self.initialized_services 
                for name in required_services
            )
        }
    
    async def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä...")
        await registry.cleanup()
        self.initialized_services.clear()


# === –†–û–õ–¨-–ü–õ–ï–ô –§–ê–ë–†–ò–ö–ò ===

class RoleplayCharacterServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª—å-–ø–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    
    def create_service(self, config: AppConfig) -> Any:
        from characters.alice import RoleplayAliceCharacter
        return RoleplayAliceCharacter()
    
    def get_dependencies(self) -> List[str]:
        return []
    
    def is_required(self, config: AppConfig) -> bool:
        return True

class RoleplayLLMServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª—å-–ø–ª–µ–π LLM —Å–µ—Ä–≤–∏—Å–∞."""
    
    def create_service(self, config: AppConfig) -> Any:
        if config.llm.provider == "ollama":
            from services.llm.ollama_client import RoleplayOllamaClient
            
            llm = RoleplayOllamaClient(
                model_name=config.llm.model_name,
                temperature=max(config.llm.temperature, 0.7),  # –ú–∏–Ω–∏–º—É–º 0.7 –¥–ª—è —Ä–æ–ª—å-–ø–ª–µ—è
                max_tokens=max(config.llm.max_tokens, 250)     # –ú–∏–Ω–∏–º—É–º 250 —Ç–æ–∫–µ–Ω–æ–≤
            )
            
            if not llm.is_available:
                logger.warning("‚ö†Ô∏è Roleplay Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return None
            
            return llm
        else:
            logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ä–æ–ª—å-–ø–ª–µ—è: {config.llm.provider}")
            return None
    
    def get_dependencies(self) -> List[str]:
        return ['character']
    
    def is_required(self, config: AppConfig) -> bool:
        return config.llm.provider != "none"

class RoleplayImageServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª—å-–ø–ª–µ–π —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π."""
    
    def create_service(self, config: AppConfig) -> Any:
        if config.image.provider == "stable_diffusion":
            model_path = config.image.model_path
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–æ–∫–∞–ª—å–Ω–∞—è –ª–∏ –º–æ–¥–µ–ª—å
            is_local_model = (
                model_path.endswith('.safetensors') or 
                model_path.endswith('.ckpt') or 
                model_path.startswith('./') or 
                model_path.startswith('../') or
                model_path.startswith('/') or
                (len(model_path) > 1 and model_path[1] == ':')  # Windows –ø—É—Ç—å —Ç–∏–ø–∞ C:\
            )
            
            if is_local_model:
                logger.info(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å-–ø–ª–µ–π –º–æ–¥–µ–ª—å: {model_path}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                if model_path.startswith('./'):
                    full_path = Path(model_path).resolve()
                else:
                    full_path = Path(model_path)
                
                if not full_path.exists():
                    logger.error(f"‚ùå –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {full_path}")
                    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–æ–¥–µ–ª—å")
                    model_path = "runwayml/stable-diffusion-v1-5"
                    is_local_model = False
                else:
                    logger.info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å-–ø–ª–µ–π –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {full_path}")
                    model_path = str(full_path)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            if is_local_model:
                from services.image.stable_diffusion import LocalStableDiffusionGenerator
                return LocalStableDiffusionGenerator(
                    model_path=model_path,
                    output_dir=config.image.output_dir,
                    safety_check=config.image.safety_check
                )
            else:
                from services.image.stable_diffusion import StableDiffusionGenerator
                return StableDiffusionGenerator(
                    model_path=model_path,
                    output_dir=config.image.output_dir,
                    safety_check=config.image.safety_check
                )
        else:
            logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {config.image.provider}")
            return None
    
    def get_dependencies(self) -> List[str]:
        return []
    
    def is_required(self, config: AppConfig) -> bool:
        return config.image.enabled

class RoleplayHandlerServiceFactory(ServiceFactory):
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª—å-–ø–ª–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    
    def create_service(self, config: AppConfig) -> Dict[str, Any]:
        from handlers.command_handlers import CommandHandlers
        from handlers.message_handlers import RoleplayMessageHandlers
        
        return {
            'command_handlers': CommandHandlers(),
            'message_handlers': RoleplayMessageHandlers()
        }
    
    def get_dependencies(self) -> List[str]:
        return ['storage', 'character']
    
    def is_required(self, config: AppConfig) -> bool:
        return True

class RoleplayServiceInitializer:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Ä–æ–ª—å-–ø–ª–µ—è."""
    
    def __init__(self, config: AppConfig):
        self.config = config
        self.factories: Dict[str, ServiceFactory] = {
            'storage': StorageServiceFactory(),
            'character': RoleplayCharacterServiceFactory(),    # –†–æ–ª—å-–ø–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂
            'llm': RoleplayLLMServiceFactory(),               # –†–æ–ª—å-–ø–ª–µ–π LLM
            'image': RoleplayImageServiceFactory(),           # –†–æ–ª—å-–ø–ª–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
            'handlers': RoleplayHandlerServiceFactory()       # –†–æ–ª—å-–ø–ª–µ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        }
        self.initialized_services: List[str] = []
    
    async def initialize_all(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è —Ä–æ–ª—å-–ø–ª–µ—è."""
        logger.info("üé≠ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª—å-–ø–ª–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
            self._register_all_services()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
            success = await registry.initialize_all()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status = registry.get_registry_status()
            self.initialized_services = [
                name for name, info in status["services"].items() 
                if info["lifecycle"] == "ready"
            ]
            
            logger.info(f"üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ä–æ–ª—å-–ø–ª–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤: {len(self.initialized_services)}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–æ–ª—å-–ø–ª–µ—è
            self._validate_roleplay_setup()
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª—å-–ø–ª–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def _validate_roleplay_setup(self):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–æ–ª—å-–ø–ª–µ—è."""
        character = registry.get('character', None)
        llm = registry.get('llm', None)
        image = registry.get('image', None)
        
        logger.info("üé≠ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª—å-–ø–ª–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫:")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–∂
        if character and hasattr(character, 'get_template_response'):
            logger.info("  ‚úÖ –†–æ–ª—å-–ø–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –≥–æ—Ç–æ–≤")
        else:
            logger.warning("  ‚ö†Ô∏è –†–æ–ª—å-–ø–ª–µ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≥–æ—Ç–æ–≤")
        
        # LLM
        if llm and hasattr(llm, 'roleplay_settings'):
            temp = llm.roleplay_settings.get('temperature', 0)
            logger.info(f"  ‚úÖ –†–æ–ª—å-–ø–ª–µ–π LLM –≥–æ—Ç–æ–≤ (temperature: {temp})")
        else:
            logger.warning("  ‚ö†Ô∏è –†–æ–ª—å-–ø–ª–µ–π LLM –Ω–µ –≥–æ—Ç–æ–≤, —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ —à–∞–±–ª–æ–Ω–∞—Ö")
        
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if image and hasattr(image, 'is_initialized') and image.is_initialized:
            model_info = getattr(image, 'model_path', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if 'oneObsession' in model_info or 'one-obsession' in model_info:
                logger.info(f"  ‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å One Obsession –≥–æ—Ç–æ–≤–∞: {model_info}")
            else:
                logger.info(f"  ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞: {model_info}")
        else:
            logger.warning("  ‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    def _register_all_services(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ–ª—å-–ø–ª–µ–π —Å–µ—Ä–≤–∏—Å—ã."""
        for service_name, factory in self.factories.items():
            try:
                def create_service(factory=factory):
                    service = factory.create_service(self.config)
                    if service is None and factory.is_required(self.config):
                        raise RuntimeError(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å {service_name} –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    
                    if isinstance(service, dict):
                        for sub_name, sub_service in service.items():
                            registry.register(sub_name, sub_service)
                        return service
                    
                    return service
                
                dependencies = factory.get_dependencies()
                
                if service_name == 'handlers':
                    def create_handlers(factory=factory):
                        handlers_dict = factory.create_service(self.config)
                        for handler_name, handler_instance in handlers_dict.items():
                            registry.register(handler_name, handler_instance)
                        return handlers_dict
                    
                    registry.register_factory(service_name, create_handlers, dependencies)
                else:
                    registry.register_factory(service_name, create_service, dependencies)
                
                logger.debug(f"üé≠ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ä–æ–ª—å-–ø–ª–µ–π —Ñ–∞–±—Ä–∏–∫–∞ {service_name}")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ–ª—å-–ø–ª–µ–π —Ñ–∞–±—Ä–∏–∫–∏ {service_name}: {e}")
                raise
    
    def get_initialization_report(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª—å-–ø–ª–µ—è."""
        registry_status = registry.get_registry_status()
        
        required_services = [
            name for name, factory in self.factories.items()
            if factory.is_required(self.config)
        ]
        
        optional_services = [
            name for name, factory in self.factories.items()
            if not factory.is_required(self.config)
        ]
        
        return {
            "initialized_services": self.initialized_services,
            "required_services": required_services,
            "optional_services": optional_services,
            "registry_status": registry_status,
            "success_rate": registry_status["ready_services"] / registry_status["total_services"] if registry_status["total_services"] > 0 else 0,
            "all_required_ready": all(
                name in self.initialized_services 
                for name in required_services
            )
        }
    
    async def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–æ–ª—å-–ø–ª–µ–π —Å–µ—Ä–≤–∏—Å—ã."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–æ–ª—å-–ø–ª–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤...")
        await registry.cleanup()
        self.initialized_services.clear()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
class ServiceUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏."""
    
    @staticmethod
    def get_llm_service():
        """–ü–æ–ª—É—á–∞–µ—Ç LLM —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω."""
        try:
            return registry.get('llm')
        except Exception:
            return None
    
    @staticmethod
    def get_storage_service():
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        return registry.get('storage')
    
    @staticmethod
    def get_character_service():
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        return registry.get('character')
    
    @staticmethod
    def get_image_service():
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω."""
        try:
            return registry.get('image')
        except Exception:
            return None
    
    @staticmethod
    def is_llm_available() -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM."""
        llm = ServiceUtils.get_llm_service()
        return llm is not None and getattr(llm, 'is_available', False)
    
    @staticmethod
    def is_image_generation_available() -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        image_service = ServiceUtils.get_image_service()
        return image_service is not None and getattr(image_service, 'is_initialized', False)
    
    @staticmethod
    def get_service_health() -> Dict[str, bool]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        return {
            "storage": registry.has('storage'),
            "character": registry.has('character'),
            "llm": ServiceUtils.is_llm_available(),
            "image": ServiceUtils.is_image_generation_available(),
            "command_handlers": registry.has('command_handlers'),
            "message_handlers": registry.has('message_handlers')
        }