"""–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –±–æ—Ç–∞."""

import logging
from typing import Dict, Any

from config.settings import AppConfig
from core.registry import registry

logger = logging.getLogger(__name__)

class BotFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤."""
    
    def __init__(self, config: AppConfig):
        self.config = config
        self.created_services: Dict[str, Any] = {}
    
    async def create_services(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã."""
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ)
        await self._create_storage_service()
        
        # –ü–µ—Ä—Å–æ–Ω–∞–∂ (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω)
        await self._create_character_service()
        
        # LLM —Å–µ—Ä–≤–∏—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if self.config.llm.provider != "none":
            await self._create_llm_service()
        
        # –°–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if self.config.image.enabled:
            await self._create_image_service()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã)
        await self._create_handlers()
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(self.created_services)}")
    
    async def _create_storage_service(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        try:
            from services.storage.memory_storage import MemoryStorage
            
            storage = MemoryStorage(
                max_conversations=self.config.storage.max_conversations
            )
            
            registry.register('storage', storage)
            self.created_services['storage'] = storage
            
            logger.info("üíæ –°–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
            raise
    
    async def _create_character_service(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        try:
            from characters.alice import AliceCharacter
            
            character = AliceCharacter()
            
            registry.register('character', character)
            self.created_services['character'] = character
            
            logger.info("üë© –ü–µ—Ä—Å–æ–Ω–∞–∂ –ê–ª–∏—Å–∞ —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            raise
    
    async def _create_llm_service(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç LLM —Å–µ—Ä–≤–∏—Å."""
        try:
            if self.config.llm.provider == "ollama":
                from services.llm.ollama_client import OllamaClient
                
                llm = OllamaClient(
                    model_name=self.config.llm.model_name,
                    temperature=self.config.llm.temperature,
                    max_tokens=self.config.llm.max_tokens
                )
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
                if await llm.initialize():
                    registry.register('llm', llm)
                    self.created_services['llm'] = llm
                    logger.info(f"üß† LLM —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω: {llm.model_name}")
                else:
                    logger.warning("‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            
            else:
                logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.config.llm.provider}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞: {e}")
            # –ù–µ –ø–∞–¥–∞–µ–º, –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM
    
    async def _create_image_service(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        try:
            if self.config.image.provider == "stable_diffusion":
                from services.image.stable_diffusion import StableDiffusionGenerator
                
                image_generator = StableDiffusionGenerator(
                    model_path=self.config.image.model_path,
                    output_dir=self.config.image.output_dir,
                    safety_check=self.config.image.safety_check
                )
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ —Ñ–æ–Ω–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–æ)
                if await image_generator.initialize():
                    registry.register('image', image_generator)
                    self.created_services['image'] = image_generator
                    logger.info(f"üé® –°–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω: {image_generator.model_path}")
                else:
                    logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")
            
            else:
                logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.config.image.provider}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            # –ù–µ –ø–∞–¥–∞–µ–º, –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    async def _create_handlers(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            from handlers.command_handlers import CommandHandlers
            from handlers.message_handlers import MessageHandlers
            
            command_handlers = CommandHandlers()
            message_handlers = MessageHandlers()
            
            registry.register('command_handlers', command_handlers)
            registry.register('message_handlers', message_handlers)
            
            self.created_services['command_handlers'] = command_handlers
            self.created_services['message_handlers'] = message_handlers
            
            logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise
    
    async def cleanup_services(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        for name, service in self.created_services.items():
            try:
                # –ï—Å–ª–∏ —É —Å–µ—Ä–≤–∏—Å–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ cleanup, –≤—ã–∑—ã–≤–∞–µ–º –µ–≥–æ
                if hasattr(service, 'cleanup'):
                    await service.cleanup()
                logger.debug(f"‚úÖ –°–µ—Ä–≤–∏—Å {name} –æ—á–∏—â–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {name}: {e}")
        
        self.created_services.clear()
        registry.clear()