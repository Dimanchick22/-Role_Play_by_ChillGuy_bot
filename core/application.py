"""–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –≤–µ—Ä—Å–∏—è."""

import logging
from typing import Optional

from telegram.ext import Application, CommandHandler, MessageHandler, filters

from config.settings import AppConfig, load_config
from core.registry import registry
from core.bot_factory import BotFactory

logger = logging.getLogger(__name__)

class TelegramBotApplication:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞."""
    
    def __init__(self, config: Optional[AppConfig] = None):
        self.config = config or load_config()
        self.app: Optional[Application] = None
        self.factory = BotFactory(self.config)
    
    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ - –°–ò–ù–•–†–û–ù–ù–û!"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = Application.builder().token(
                self.config.telegram.bot_token
            ).build()
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –°–ò–ù–•–†–û–ù–ù–û
            self._create_services()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –ø–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
            logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            self._log_services_status()
            
            logger.info("üëÇ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # python-telegram-bot –°–ê–ú–ê —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop!
            # –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú asyncio.run(), –ù–ï —Å–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏!
            self.app.run_polling(
                drop_pending_updates=True,
                allowed_updates=["message", "callback_query"]
            )
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            raise
    
    def _create_services(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å—ã –°–ò–ù–•–†–û–ù–ù–û."""
        logger.info("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ)
        self._create_storage_service()
        
        # –ü–µ—Ä—Å–æ–Ω–∞–∂ (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–µ–Ω)
        self._create_character_service()
        
        # LLM —Å–µ—Ä–≤–∏—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if self.config.llm.provider != "none":
            self._create_llm_service()
        
        # –°–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if self.config.image.enabled:
            self._create_image_service()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã)
        self._create_handlers()
        
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
    
    def _create_storage_service(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."""
        try:
            from services.storage.memory_storage import MemoryStorage
            
            storage = MemoryStorage(
                max_conversations=self.config.storage.max_conversations
            )
            
            registry.register('storage', storage)
            logger.info("üíæ –°–µ—Ä–≤–∏—Å —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")
            raise
    
    def _create_character_service(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        try:
            from characters.alice import AliceCharacter
            
            character = AliceCharacter()
            
            registry.register('character', character)
            logger.info("üë© –ü–µ—Ä—Å–æ–Ω–∞–∂ –ê–ª–∏—Å–∞ —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
            raise
    
    def _create_llm_service(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç LLM —Å–µ—Ä–≤–∏—Å."""
        try:
            if self.config.llm.provider == "ollama":
                from services.llm.ollama_client import OllamaClient
                
                llm = OllamaClient(
                    model_name=self.config.llm.model_name,
                    temperature=self.config.llm.temperature,
                    max_tokens=self.config.llm.max_tokens
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –°–ò–ù–•–†–û–ù–ù–û
                try:
                    import ollama
                    ollama.list()  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    
                    registry.register('llm', llm)
                    logger.info(f"üß† LLM —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω: {llm.model_name}")
                except:
                    logger.warning("‚ö†Ô∏è Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –±–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM")
            
            else:
                logger.warning(f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.config.llm.provider}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞: {e}")
            # –ù–µ –ø–∞–¥–∞–µ–º, –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ LLM
    
    def _create_image_service(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        try:
            logger.warning("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç async –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
    
    def _create_handlers(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            from handlers.command_handlers import CommandHandlers
            from handlers.message_handlers import MessageHandlers
            
            command_handlers = CommandHandlers()
            message_handlers = MessageHandlers()
            
            registry.register('command_handlers', command_handlers)
            registry.register('message_handlers', message_handlers)
            
            logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        command_handlers = registry.get('command_handlers')
        message_handlers = registry.get('message_handlers')
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", command_handlers.start_command))
        self.app.add_handler(CommandHandler("help", command_handlers.help_command))
        self.app.add_handler(CommandHandler("stats", command_handlers.stats_command))
        self.app.add_handler(CommandHandler("clear", command_handlers.clear_command))
        self.app.add_handler(CommandHandler("info", command_handlers.info_command))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if self.config.image.enabled:
            self.app.add_handler(CommandHandler("image", command_handlers.image_command))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            message_handlers.handle_text
        ))
        
        # –û—à–∏–±–∫–∏
        self.app.add_error_handler(self._error_handler)
        
        logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    def _log_services_status(self) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤."""
        services_status = []
        
        # LLM —Å–µ—Ä–≤–∏—Å
        if registry.has('llm'):
            services_status.append("üß† LLM: –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            services_status.append("üß† LLM: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –°–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if registry.has('image'):
            services_status.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∞–∫—Ç–∏–≤–Ω—ã")
        else:
            services_status.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ
        if registry.has('storage'):
            services_status.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: –∞–∫—Ç–∏–≤–Ω–æ")
        else:
            services_status.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: –æ—à–∏–±–∫–∞")
        
        logger.info("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        for status in services_status:
            logger.info(f"  {status}")
    
    async def _error_handler(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}", exc_info=context.error)
        
        if update and update.message:
            try:
                await update.message.reply_text(
                    "–£–ø—Å! üôà –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")