"""–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - —É–ª—É—á—à–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞."""

import logging
from typing import Optional

from telegram.ext import Application, CommandHandler, MessageHandler, filters

from config.settings import AppConfig, load_config
from core.registry import registry
from core.service_initializer import ImprovedServiceInitializer, ServiceUtils

logger = logging.getLogger(__name__)

class TelegramBotApplication:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""
    
    def __init__(self, config: Optional[AppConfig] = None):
        self.config = config or load_config()
        self.app: Optional[Application] = None
        self.initializer = ImprovedServiceInitializer(self.config)
        self._is_running = False
    
    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = Application.builder().token(
                self.config.telegram.bot_token
            ).build()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            if not self._initialize_services():
                raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
            self._log_application_status()
            
            logger.info("üëÇ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
            self._is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            self.app.run_polling(
                drop_pending_updates=True,
                allowed_updates=["message", "callback_query"]
            )
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            raise
        finally:
            self._is_running = False
            self._cleanup()
    
    def _initialize_services(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥."""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π ServiceInitializer
            import asyncio
            success = asyncio.get_event_loop().run_until_complete(
                self.initializer.initialize_all()
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            report = self.initializer.get_initialization_report()
            
            logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
            logger.info(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['success_rate']:.0%}")
            logger.info(f"  –ì–æ—Ç–æ–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(report['initialized_services'])}")
            logger.info(f"  –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≥–æ—Ç–æ–≤—ã: {report['all_required_ready']}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
            for service_name, status in report['registry_status']['services'].items():
                status_emoji = "‚úÖ" if status['lifecycle'] == 'ready' else "‚ùå"
                logger.info(f"  {status_emoji} {service_name}: {status['lifecycle']}")
                
                if status['error']:
                    logger.warning(f"    –û—à–∏–±–∫–∞: {status['error']}")
            
            return report['all_required_ready']
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ —É—Ç–∏–ª–∏—Ç—ã
            command_handlers = registry.get('command_handlers')
            message_handlers = registry.get('message_handlers')
            
            if not command_handlers or not message_handlers:
                raise RuntimeError("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            self.app.add_handler(CommandHandler("start", command_handlers.start_command))
            self.app.add_handler(CommandHandler("help", command_handlers.help_command))
            self.app.add_handler(CommandHandler("info", command_handlers.info_command))
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π (–µ—Å–ª–∏ LLM –¥–æ—Å—Ç—É–ø–µ–Ω)
            if ServiceUtils.is_llm_available():
                self.app.add_handler(CommandHandler("clear", command_handlers.clear_command))
                self.app.add_handler(CommandHandler("stats", command_handlers.stats_command))
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            if ServiceUtils.is_image_generation_available():
                self.app.add_handler(CommandHandler("image", command_handlers.image_command))
            
            # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            self.app.add_handler(MessageHandler(
                filters.TEXT & ~filters.COMMAND,
                message_handlers.handle_text
            ))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.app.add_error_handler(self._error_handler)
            
            logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
            raise
    
    def _log_application_status(self) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        logger.info("ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
        health = ServiceUtils.get_service_health()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
        storage_status = "‚úÖ –∞–∫—Ç–∏–≤–Ω–æ" if health['storage'] else "‚ùå –æ—à–∏–±–∫–∞"
        character_status = "‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if health['character'] else "‚ùå –æ—à–∏–±–∫–∞"
        
        logger.info(f"  üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_status}")
        logger.info(f"  üë© –ü–µ—Ä—Å–æ–Ω–∞–∂: {character_status}")
        
        # LLM —Å–µ—Ä–≤–∏—Å
        if health['llm']:
            llm_service = ServiceUtils.get_llm_service()
            model_name = getattr(llm_service, 'active_model', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            logger.info(f"  üß† LLM: ‚úÖ {model_name}")
        else:
            logger.info("  üß† LLM: ‚ùå –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ —à–∞–±–ª–æ–Ω–æ–≤)")
        
        # –°–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if health['image']:
            logger.info("  üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚úÖ –∞–∫—Ç–∏–≤–Ω—ã")
        else:
            logger.info("  üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ‚ùå –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers_status = "‚úÖ" if health['command_handlers'] and health['message_handlers'] else "‚ùå"
        logger.info(f"  üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {handlers_status}")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        critical_services = ['storage', 'character', 'command_handlers', 'message_handlers']
        all_critical_ready = all(health[service] for service in critical_services)
        
        if all_critical_ready:
            logger.info("üü¢ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            logger.warning("üü° –ë–æ—Ç –≥–æ—Ç–æ–≤, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    async def _error_handler(self, update, context) -> None:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        error = context.error
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {error}", exc_info=error)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –¥–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–≤–µ—Ç
        if update and update.message:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
                character_service = ServiceUtils.get_character_service()
                
                if character_service and hasattr(character_service, 'get_error_responses'):
                    import random
                    error_responses = character_service.get_error_responses()
                    error_message = random.choice(error_responses)
                else:
                    error_message = "–£–ø—Å! üôà –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
                
                await update.message.reply_text(error_message)
                
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def _cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try:
            import asyncio
            asyncio.get_event_loop().run_until_complete(
                self.initializer.cleanup()
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    @property
    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç."""
        return self._is_running
    
    def get_application_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        health = ServiceUtils.get_service_health()
        report = self.initializer.get_initialization_report()
        
        return {
            "is_running": self.is_running,
            "services_health": health,
            "initialization_report": report,
            "telegram_app_ready": self.app is not None
        }