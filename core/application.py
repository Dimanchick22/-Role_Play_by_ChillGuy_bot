"""–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""

import logging
import asyncio
from typing import Optional

from telegram.ext import Application, CommandHandler, MessageHandler, filters

from config.settings import AppConfig, load_config
from core.registry import registry
from core.bot_factory import BotFactory

logger = logging.getLogger(__name__)

class TelegramBotApplication:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞."""
    
    def __init__(self, config: Optional[AppConfig] = None):
        self.config = config or load_config()
        self.app: Optional[Application] = None
        self.factory = BotFactory(self.config)
        self.is_running = False
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            await self.factory.create_services()
            
            # –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = Application.builder().token(
                self.config.telegram.bot_token
            ).build()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self._register_handlers()
            
            logger.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", exc_info=True)
            return False
    
    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
        if not self.app:
            raise RuntimeError("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            bot_info = await self.app.bot.get_me()
            logger.info(f"ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ @{bot_info.username}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            await self._log_services_status()
            
            self.is_running = True
            logger.info("üëÇ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.app.initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º updater
            await self.app.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=["message", "callback_query"]
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.app.start()
            
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            try:
                while self.is_running:
                    await asyncio.sleep(1)
            except asyncio.CancelledError:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            raise
        finally:
            await self._cleanup()
    
    async def stop(self) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞."""
        if self.is_running:
            logger.info("üõë –ù–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –±–æ—Ç–∞...")
            self.is_running = False
    
    async def _cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            if self.app:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater
                if hasattr(self.app, 'updater') and self.app.updater.running:
                    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ updater...")
                    await self.app.updater.stop()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                logger.info("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                await self.app.stop()
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
                logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                await self.app.shutdown()
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            await self.factory.cleanup_services()
            
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}", exc_info=True)
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        command_handlers = registry.get('command_handlers')
        message_handlers = registry.get('message_handlers')
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", command_handlers.start_command))
        self.app.add_handler(CommandHandler("help", command_handlers.help_command))
        self.app.add_handler(CommandHandler("stats", command_handlers.stats_command))
        self.app.add_handler(CommandHandler("clear", command_handlers.clear_command))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.app.add_handler(CommandHandler("info", command_handlers.info_command))
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if self.config.image.enabled:
            self.app.add_handler(CommandHandler("image", command_handlers.image_command))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            message_handlers.handle_text
        ))
        
        # –û—à–∏–±–∫–∏
        self.app.add_error_handler(self._error_handler)
        
        logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def _log_services_status(self) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤."""
        services_status = []
        
        # LLM —Å–µ—Ä–≤–∏—Å
        try:
            llm_service = registry.get('llm', None)
            if llm_service and hasattr(llm_service, 'is_available') and llm_service.is_available:
                model_name = getattr(llm_service, 'model_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                services_status.append(f"üß† LLM: {model_name}")
            else:
                services_status.append("üß† LLM: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            services_status.append("üß† LLM: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –°–µ—Ä–≤–∏—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        if self.config.image.enabled:
            try:
                image_service = registry.get('image', None)
                if image_service and hasattr(image_service, 'is_initialized') and image_service.is_initialized:
                    services_status.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∞–∫—Ç–∏–≤–Ω—ã")
                else:
                    services_status.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
            except:
                services_status.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            services_status.append("üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ
        try:
            storage_service = registry.get('storage', None)
            if storage_service and hasattr(storage_service, 'get_stats'):
                stats = storage_service.get_stats()
                total_conversations = stats.get('total_conversations', 0)
                services_status.append(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {total_conversations} –¥–∏–∞–ª–æ–≥–æ–≤")
            else:
                services_status.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: –∞–∫—Ç–∏–≤–Ω–æ")
        except:
            services_status.append("üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: –æ—à–∏–±–∫–∞")
        
        logger.info("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        for status in services_status:
            logger.info(f"  {status}")
    
    async def _error_handler(self, update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}", exc_info=context.error)
        
        if update and update.message:
            try:
                await update.message.reply_text(
                    "–£–ø—Å! üôà –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")