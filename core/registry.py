"""–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –ª—É—á—à–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""

import asyncio
import logging
import weakref
from abc import ABC, abstractmethod
from typing import Dict, Any, TypeVar, Type, Optional, Callable, Protocol
from enum import Enum

T = TypeVar('T')

logger = logging.getLogger(__name__)

class ServiceLifecycle(Enum):
    """–ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª —Å–µ—Ä–≤–∏—Å–∞."""
    CREATED = "created"
    INITIALIZING = "initializing"
    READY = "ready"
    ERROR = "error"
    DESTROYING = "destroying"
    DESTROYED = "destroyed"

class IService(Protocol):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞."""
    
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å."""
        ...
    
    async def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Ä–≤–∏—Å–∞."""
        ...

class ServiceDescriptor:
    """–î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
    
    def __init__(self, name: str, service: Any, factory: Optional[Callable] = None):
        self.name = name
        self.service = service
        self.factory = factory
        self.lifecycle = ServiceLifecycle.CREATED
        self.dependencies: set[str] = set()
        self.dependents: set[str] = set()
        self.error: Optional[Exception] = None
    
    @property
    def is_ready(self) -> bool:
        return self.lifecycle == ServiceLifecycle.READY
    
    @property
    def has_error(self) -> bool:
        return self.lifecycle == ServiceLifecycle.ERROR

class DependencyResolver:
    """–†–µ–∑–æ–ª–≤–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤."""
    
    def __init__(self):
        self.dependencies: Dict[str, set[str]] = {}
    
    def add_dependency(self, service: str, depends_on: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å."""
        if service not in self.dependencies:
            self.dependencies[service] = set()
        self.dependencies[service].add(depends_on)
    
    def resolve_order(self, services: set[str]) -> list[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤."""
        resolved = []
        unresolved = set(services)
        
        while unresolved:
            # –ù–∞—Ö–æ–¥–∏–º —Å–µ—Ä–≤–∏—Å—ã –±–µ–∑ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            ready = [
                service for service in unresolved
                if not (self.dependencies.get(service, set()) & unresolved)
            ]
            
            if not ready:
                # –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
                raise ValueError(f"–¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {unresolved}")
            
            resolved.extend(ready)
            unresolved -= set(ready)
        
        return resolved

class EnhancedServiceRegistry:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä —Å–µ—Ä–≤–∏—Å–æ–≤."""
    
    def __init__(self):
        self._services: Dict[str, ServiceDescriptor] = {}
        self._dependency_resolver = DependencyResolver()
        self._initialization_lock = asyncio.Lock()
        self._weak_refs: Dict[str, Any] = {}
    
    def register(self, name: str, service: Any, 
                depends_on: Optional[list[str]] = None) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏."""
        try:
            descriptor = ServiceDescriptor(name, service)
            self._services[name] = descriptor
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if depends_on:
                for dep in depends_on:
                    self._dependency_resolver.add_dependency(name, dep)
                    descriptor.dependencies.add(dep)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    if dep in self._services:
                        self._services[dep].dependents.add(name)
            
            logger.debug(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å: {name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ {name}: {e}")
            raise
    
    def register_factory(self, name: str, factory: Callable,
                        depends_on: Optional[list[str]] = None) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞."""
        if not callable(factory):
            raise ValueError(f"–§–∞–±—Ä–∏–∫–∞ –¥–ª—è {name} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑—ã–≤–∞–µ–º–æ–π")
        
        descriptor = ServiceDescriptor(name, None, factory)
        self._services[name] = descriptor
        
        if depends_on:
            for dep in depends_on:
                self._dependency_resolver.add_dependency(name, dep)
                descriptor.dependencies.add(dep)
        
        logger.debug(f"üè≠ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞: {name}")
    
    async def initialize_all(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
        async with self._initialization_lock:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                service_names = set(self._services.keys())
                init_order = self._dependency_resolver.resolve_order(service_names)
                
                logger.info(f"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è {len(init_order)} —Å–µ—Ä–≤–∏—Å–æ–≤...")
                
                success_count = 0
                for name in init_order:
                    try:
                        if await self._initialize_service(name):
                            success_count += 1
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")
                        self._services[name].lifecycle = ServiceLifecycle.ERROR
                        self._services[name].error = e
                
                logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {success_count}/{len(init_order)}")
                return success_count == len(init_order)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                return False
    
    async def _initialize_service(self, name: str) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å."""
        descriptor = self._services[name]
        
        try:
            descriptor.lifecycle = ServiceLifecycle.INITIALIZING
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if descriptor.service is None and descriptor.factory:
                descriptor.service = descriptor.factory()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Ç–æ–¥
            if hasattr(descriptor.service, 'initialize'):
                result = await descriptor.service.initialize()
                if not result:
                    descriptor.lifecycle = ServiceLifecycle.ERROR
                    return False
            
            descriptor.lifecycle = ServiceLifecycle.READY
            logger.debug(f"‚úÖ –°–µ—Ä–≤–∏—Å {name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            descriptor.lifecycle = ServiceLifecycle.ERROR
            descriptor.error = e
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {name}: {e}")
            return False
    
    def get(self, name: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        try:
            if name not in self._services:
                if default is not None:
                    return default
                raise ValueError(f"–°–µ—Ä–≤–∏—Å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            descriptor = self._services[name]
            
            if descriptor.has_error:
                logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å {name} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—à–∏–±–∫–∏")
                if default is not None:
                    return default
                raise RuntimeError(f"–°–µ—Ä–≤–∏—Å '{name}' –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—à–∏–±–∫–∏")
            
            return descriptor.service
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ {name}: {e}")
            if default is not None:
                return default
            raise
    
    def get_typed(self, service_type: Type[T]) -> Optional[T]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ —Ç–∏–ø—É."""
        name = service_type.__name__.lower()
        try:
            return self.get(name)
        except Exception:
            logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Ç–∏–ø–∞ {service_type.__name__} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
    
    def has(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞."""
        return (name in self._services and 
                self._services[name].is_ready)
    
    def get_service_status(self, name: str) -> Optional[ServiceLifecycle]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞."""
        if name in self._services:
            return self._services[name].lifecycle
        return None
    
    def get_registry_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ–≥–æ —Ä–µ–µ—Å—Ç—Ä–∞."""
        status = {
            "total_services": len(self._services),
            "ready_services": sum(1 for s in self._services.values() if s.is_ready),
            "error_services": sum(1 for s in self._services.values() if s.has_error),
            "services": {}
        }
        
        for name, descriptor in self._services.items():
            status["services"][name] = {
                "lifecycle": descriptor.lifecycle.value,
                "dependencies": list(descriptor.dependencies),
                "dependents": list(descriptor.dependents),
                "error": str(descriptor.error) if descriptor.error else None
            }
        
        return status
    
    async def cleanup(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –æ—á–∏—Å—Ç–∫–∏ (–æ–±—Ä–∞—Ç–Ω—ã–π –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
            service_names = [name for name in self._services.keys() 
                           if self._services[name].is_ready]
            
            if service_names:
                cleanup_order = list(reversed(
                    self._dependency_resolver.resolve_order(set(service_names))
                ))
                
                for name in cleanup_order:
                    await self._cleanup_service(name)
            
            self._services.clear()
            self._weak_refs.clear()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    async def _cleanup_service(self, name: str) -> None:
        """–û—á–∏—â–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å."""
        try:
            descriptor = self._services[name]
            descriptor.lifecycle = ServiceLifecycle.DESTROYING
            
            if hasattr(descriptor.service, 'cleanup'):
                cleanup_method = descriptor.service.cleanup
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ async
                if asyncio.iscoroutinefunction(cleanup_method):
                    await cleanup_method()
                else:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ - –≤—ã–∑—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
                    cleanup_method()
            
            descriptor.lifecycle = ServiceLifecycle.DESTROYED
            logger.debug(f"üßπ –°–µ—Ä–≤–∏—Å {name} –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {name}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
registry = EnhancedServiceRegistry()