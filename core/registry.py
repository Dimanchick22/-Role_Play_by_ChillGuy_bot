"""–†–µ–µ—Å—Ç—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è dependency injection - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""

from typing import Dict, Any, TypeVar, Type, Optional, Callable
import logging
import weakref

T = TypeVar('T')

logger = logging.getLogger(__name__)

class ServiceRegistry:
    """–†–µ–µ—Å—Ç—Ä —Å–µ—Ä–≤–∏—Å–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    
    def __init__(self):
        self._services: Dict[str, Any] = {}
        self._factories: Dict[str, Callable] = {}
        self._singletons: Dict[str, Any] = {}
        self._weak_refs: Dict[str, Any] = {}
        self._initialized = True
    
    def register(self, name: str, service: Any) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å."""
        try:
            self._services[name] = service
            logger.debug(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–µ—Ä–≤–∏—Å: {name}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ {name}: {e}")
            raise
    
    def register_factory(self, name: str, factory: Callable) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞."""
        if not callable(factory):
            raise ValueError(f"–§–∞–±—Ä–∏–∫–∞ –¥–ª—è {name} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑—ã–≤–∞–µ–º–æ–π")
        
        self._factories[name] = factory
        logger.debug(f"üè≠ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∞: {name}")
    
    def register_singleton(self, name: str, factory: Callable) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω."""
        if not callable(factory):
            raise ValueError(f"–§–∞–±—Ä–∏–∫–∞ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ –¥–ª—è {name} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–∑—ã–≤–∞–µ–º–æ–π")
        
        self._factories[name] = factory
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω–≥–ª—Ç–æ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º None –∫–∞–∫ –º–∞—Ä–∫–µ—Ä)
        self._singletons[name] = None
        logger.debug(f"üîí –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å–∏–Ω–≥–ª—Ç–æ–Ω: {name}")
    
    def get(self, name: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            if name in self._services:
                return self._services[name]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã
            if name in self._singletons and self._singletons[name] is not None:
                return self._singletons[name]
            
            # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
            if name in self._factories:
                try:
                    service = self._factories[name]()
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ —Å–∏–Ω–≥–ª—Ç–æ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                    if name in self._singletons:
                        self._singletons[name] = service
                        logger.debug(f"üîí –°–æ–∑–¥–∞–Ω —Å–∏–Ω–≥–ª—Ç–æ–Ω: {name}")
                    else:
                        logger.debug(f"üè≠ –°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É: {name}")
                    
                    return service
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ {name}: {e}")
                    if default is not None:
                        return default
                    raise
            
            # –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
            if default is not None:
                logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return default
            
            raise ValueError(f"–°–µ—Ä–≤–∏—Å '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ {name}: {e}")
            if default is not None:
                return default
            raise
    
    def get_typed(self, service_type: Type[T]) -> Optional[T]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –ø–æ —Ç–∏–ø—É."""
        name = service_type.__name__.lower()
        try:
            return self.get(name)
        except Exception:
            logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å —Ç–∏–ø–∞ {service_type.__name__} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
    
    def has(self, name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä–≤–∏—Å–∞."""
        return (name in self._services or 
                name in self._factories or 
                (name in self._singletons and self._singletons[name] is not None))
    
    def get_registered_services(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤."""
        services_info = {}
        
        for name in self._services:
            services_info[name] = "ready"
        
        for name in self._factories:
            if name in self._singletons:
                status = "singleton_created" if self._singletons[name] is not None else "singleton_factory"
            else:
                status = "factory"
            services_info[name] = status
        
        return services_info
    
    def clear(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤."""
        try:
            logger.debug("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
            
            # –û—á–∏—â–∞–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã –ø–µ—Ä–≤—ã–º–∏ (—É –Ω–∏—Ö –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
            for name, service in self._singletons.items():
                if service is not None and hasattr(service, 'cleanup'):
                    try:
                        service.cleanup()
                        logger.debug(f"üßπ –û—á–∏—â–µ–Ω —Å–∏–Ω–≥–ª—Ç–æ–Ω: {name}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ {name}: {e}")
            
            # –û—á–∏—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
            for name, service in self._services.items():
                if hasattr(service, 'cleanup'):
                    try:
                        service.cleanup()
                        logger.debug(f"üßπ –û—á–∏—â–µ–Ω —Å–µ—Ä–≤–∏—Å: {name}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {name}: {e}")
            
            # –û—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            self._services.clear()
            self._factories.clear()
            self._singletons.clear()
            self._weak_refs.clear()
            
            logger.debug("‚úÖ –†–µ–µ—Å—Ç—Ä –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞: {e}")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏."""
        if hasattr(self, '_initialized') and self._initialized:
            try:
                self.clear()
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä
registry = ServiceRegistry()