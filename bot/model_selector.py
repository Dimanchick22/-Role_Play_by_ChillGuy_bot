"""–°–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π Ollama."""

import logging
from typing import List, Optional, Dict, Any
import ollama

logger = logging.getLogger(__name__)


class ModelInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏."""
    
    def __init__(self, name: str, size: int = 0, modified: str = ""):
        self.name = name
        self.size = size
        self.modified = modified
    
    @property
    def size_gb(self) -> str:
        """–†–∞–∑–º–µ—Ä –≤ GB."""
        if self.size > 0:
            return f"{self.size / (1024**3):.1f} GB"
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    @property
    def display_name(self) -> str:
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        base_name = self.name.split(':')[0]
        tag = self.name.split(':')[1] if ':' in self.name else 'latest'
        return f"{base_name} ({tag})"
    
    def __str__(self) -> str:
        return f"{self.display_name} - {self.size_gb}"


class ModelSelector:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Ollama."""
    
    def __init__(self):
        self.available_models: List[ModelInfo] = []
        self._scan_models()
    
    def _scan_models(self) -> None:
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏."""
        try:
            logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Ollama...")
            
            models_response = ollama.list()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
            if hasattr(models_response, 'models'):
                models_list = models_response.models
            elif isinstance(models_response, dict) and 'models' in models_response:
                models_list = models_response['models']
            else:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {type(models_response)}")
                return
            
            # –ü–∞—Ä—Å–∏–º –º–æ–¥–µ–ª–∏
            for model in models_list:
                try:
                    model_info = self._parse_model(model)
                    if model_info:
                        self.available_models.append(model_info)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–æ–¥–µ–ª–∏ {model}: {e}")
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(self.available_models)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            raise
    
    def _parse_model(self, model: Any) -> Optional[ModelInfo]:
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏."""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è
        name = None
        if hasattr(model, 'model'):
            name = model.model
        elif hasattr(model, 'name'):
            name = model.name
        elif isinstance(model, dict):
            name = model.get('model') or model.get('name')
        
        if not name:
            return None
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–º–µ—Ä
        size = 0
        if hasattr(model, 'size'):
            size = model.size or 0
        elif isinstance(model, dict) and 'size' in model:
            size = model['size'] or 0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
        modified = ""
        if hasattr(model, 'modified_at'):
            modified = str(model.modified_at) if model.modified_at else ""
        elif isinstance(model, dict) and 'modified_at' in model:
            modified = str(model['modified_at']) if model['modified_at'] else ""
        
        return ModelInfo(name, size, modified)
    
    def get_models(self) -> List[ModelInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π."""
        return self.available_models
    
    def get_model_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏–º–µ–Ω–∞ –º–æ–¥–µ–ª–µ–π."""
        return [model.name for model in self.available_models]
    
    def find_model(self, query: str) -> Optional[ModelInfo]:
        """–ò—â–µ—Ç –º–æ–¥–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É."""
        query_lower = query.lower()
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for model in self.available_models:
            if model.name.lower() == query_lower:
                return model
        
        # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for model in self.available_models:
            if query_lower in model.name.lower():
                return model
        
        return None
    
    def get_recommended_model(self) -> Optional[ModelInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—É—é –º–æ–¥–µ–ª—å."""
        if not self.available_models:
            return None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –º–æ–¥–µ–ª–µ–π
        preferred = [
            'llama3.2:3b',
            'llama3.2:1b', 
            'llama3.2',
            'llama3.1:8b',
            'llama3.1',
            'mistral:7b',
            'mistral',
            'qwen2.5:7b',
            'qwen2.5',
            'dolphin-llama3',
            'dolphin3'
        ]
        
        # –ò—â–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        for pref in preferred:
            for model in self.available_models:
                if pref.lower() in model.name.lower():
                    return model
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é
        return self.available_models[0]
    
    def display_models(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π."""
        if not self.available_models:
            return "‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        lines = ["üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Ollama:\n"]
        
        for i, model in enumerate(self.available_models, 1):
            lines.append(f"{i:2d}. {model}")
        
        recommended = self.get_recommended_model()
        if recommended:
            lines.append(f"\n‚≠ê –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è: {recommended.display_name}")
        
        return "\n".join(lines)
    
    def select_interactive(self) -> Optional[str]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏."""
        if not self.available_models:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return None
        
        print(self.display_models())
        print()
        
        while True:
            try:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å (–Ω–æ–º–µ—Ä –∏–ª–∏ Enter –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π): ").strip()
                
                # –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å
                if not choice:
                    recommended = self.get_recommended_model()
                    if recommended:
                        return recommended.name
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä
                if choice.isdigit():
                    index = int(choice) - 1
                    if 0 <= index < len(self.available_models):
                        return self.available_models[index].name
                    else:
                        print(f"‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(self.available_models)}")
                        continue
                
                # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                found = self.find_model(choice)
                if found:
                    return found.name
                else:
                    print(f"‚ùå –ú–æ–¥–µ–ª—å '{choice}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    continue
                    
            except KeyboardInterrupt:
                print("\nüëã –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞")
                return None
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                continue
    
    def validate_model(self, model_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞."""
        return any(model.name == model_name for model in self.available_models)


def select_model_cli() -> Optional[str]:
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏."""
    try:
        selector = ModelSelector()
        return selector.select_interactive()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä Ollama")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –º–æ–¥–µ–ª–∏ (ollama pull <model>)")
        return None


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    model = select_model_cli()
    if model:
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}")
    else:
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")