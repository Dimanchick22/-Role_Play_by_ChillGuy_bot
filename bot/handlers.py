"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""

import logging
import random
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes

from .character import Character
from .llm_client import LLMClient
from .model_selector import ModelSelector

logger = logging.getLogger(__name__)


class BotHandlers:
    """–ö–ª–∞—Å—Å —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –±–æ—Ç–∞."""
    
    def __init__(self, character: Character, llm: Optional[LLMClient] = None):
        self.character = character
        self.llm = llm
        self.use_llm = llm is not None
    
    def toggle_llm_mode(self) -> str:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º LLM."""
        self.use_llm = not self.use_llm
        mode = "ü§ñ LLM" if self.use_llm else "üìù –®–∞–±–ª–æ–Ω—ã"
        return f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode}"
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        user_name = update.effective_user.first_name
        user_id = update.effective_user.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
        if self.llm:
            prompt = self.character.get_system_prompt(user_name)
            self.llm.set_system_prompt(prompt)
        
        welcome = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üåü\n\n{self.character.get_info()}"
        
        if self.llm:
            mode = "ü§ñ LLM" if self.use_llm else "üìù –®–∞–±–ª–æ–Ω—ã"
            welcome += f"\n\n–†–µ–∂–∏–º: {mode}"
        
        await update.message.reply_text(welcome)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} ({user_id})")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /help."""
        commands = [
            "/start - –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π",
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É", 
            "/info - –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ",
            "/question - –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å"
        ]
        
        if self.llm:
            commands.extend([
                "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                "/mode - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º",
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "/models - –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π",
                "/switch - –°–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"
            ])
        
        help_text = f"""ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É

–ü—Ä–∏–≤–µ—Ç! –Ø {self.character.name}, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥!

–ö–æ–º–∞–Ω–¥—ã:
{chr(10).join(commands)}

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üí¨"""
        
        await update.message.reply_text(help_text)
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /info."""
        await update.message.reply_text(self.character.get_info())
    
    async def question_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /question."""
        question = self.character.get_random_question()
        await update.message.reply_text(question)
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /clear."""
        if not self.llm:
            await update.message.reply_text("LLM –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ü§∑‚Äç‚ôÄÔ∏è")
            return
        
        user_id = update.effective_user.id
        self.llm.clear_history(user_id)
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! üßπ‚ú®")
    
    async def mode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /mode."""
        if not self.llm:
            await update.message.reply_text("LLM –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ü§∑‚Äç‚ôÄÔ∏è")
            return
        
        response = self.toggle_llm_mode()
        await update.message.reply_text(response)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /stats."""
        if not self.llm:
            await update.message.reply_text("LLM –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ü§∑‚Äç‚ôÄÔ∏è")
            return
        
        stats = self.llm.get_stats()
        stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

–ú–æ–¥–µ–ª—å: {stats['model']}
–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {stats['active_conversations']}
–ú–∞–∫—Å–∏–º—É–º –∏—Å—Ç–æ—Ä–∏–∏: {stats['max_history']} —Å–æ–æ–±—â–µ–Ω–∏–π
–†–µ–∂–∏–º: {"ü§ñ LLM" if self.use_llm else "üìù –®–∞–±–ª–æ–Ω—ã"}"""
        
        await update.message.reply_text(stats_text)
    
    async def models_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /models - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏."""
        if not self.llm:
            await update.message.reply_text("LLM –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ü§∑‚Äç‚ôÄÔ∏è")
            return
        
        try:
            selector = ModelSelector()
            models_list = selector.display_models()
            
            current_model = f"\n\nüéØ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {self.llm.model_name}"
            await update.message.reply_text(models_list + current_model)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
    
    async def switch_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ö–æ–º–∞–Ω–¥–∞ /switch - —Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏."""
        if not self.llm:
            await update.message.reply_text("LLM –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ü§∑‚Äç‚ôÄÔ∏è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
            try:
                selector = ModelSelector()
                models_list = selector.display_models()
                help_text = f"""{models_list}

üí° –î–ª—è —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/switch <–∏–º—è_–º–æ–¥–µ–ª–∏>

–ù–∞–ø—Ä–∏–º–µ—Ä:
/switch llama3.2:3b
/switch mistral"""
                await update.message.reply_text(help_text)
                return
            except Exception as e:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π")
                return
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å
        new_model = " ".join(args)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            selector = ModelSelector()
            found_model = selector.find_model(new_model)
            
            if not found_model:
                available = ", ".join([m.name for m in selector.get_models()[:3]])
                await update.message.reply_text(
                    f"‚ùå –ú–æ–¥–µ–ª—å '{new_model}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {available}...\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /models –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"
                )
                return
            
            # –ú–µ–Ω—è–µ–º –º–æ–¥–µ–ª—å
            old_model = self.llm.model_name
            self.llm.set_model(found_model.name)
            
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
            user_id = update.effective_user.id
            self.llm.clear_history(user_id)
            
            await update.message.reply_text(
                f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
                f"–ë—ã–ª–æ: {old_model}\n"
                f"–°—Ç–∞–ª–æ: {found_model.name}\n\n"
                f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞ üßπ"
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} —Å–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å —Å {old_model} –Ω–∞ {found_model.name}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –º–æ–¥–µ–ª–∏: {str(e)}")
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user_message = update.message.text
        user_name = update.effective_user.first_name
        user_id = update.effective_user.id
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id, 
            action="typing"
        )
        
        try:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–æ—Å–æ–± –æ—Ç–≤–µ—Ç–∞
            if self.use_llm and self.llm:
                response = await self.llm.get_response(user_message, user_id)
            else:
                response = self.character.get_template_response(user_message, user_name)
            
            await update.message.reply_text(response)
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            mode = "LLM" if (self.use_llm and self.llm) else "Template"
            logger.info(f"{user_name}: {user_message[:50]}... -> [{mode}] {response[:50]}...")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–£–ø—Å! üôà –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
    
    async def handle_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤."""
        user_id = update.effective_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
        if update.message.sticker:
            media_prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å—Ç–∏–∫–µ—Ä"
            fallback_responses = ["–ö–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üòÑ", "–õ—é–±–ª—é —Å—Ç–∏–∫–µ—Ä—ã! ü§©"]
        elif update.message.photo:
            media_prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ"
            fallback_responses = ["–ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ç–æ! üì∏‚ú®", "–í–∞—É! ü§©"]
        elif update.message.voice:
            media_prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            fallback_responses = ["–ü–æ–ª—É—á–∏–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ! üé§ –ù–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ä–µ—á—å üòÖ"]
        elif update.message.video:
            media_prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ"
            fallback_responses = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –≤–∏–¥–µ–æ! üé•", "–ö–ª–∞—Å—Å–Ω–æ! ‚ú®"]
        else:
            media_prompt = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–∞–π–ª"
            fallback_responses = ["–ü–æ–ª—É—á–∏–ª–∞ —Ñ–∞–π–ª! üìé", "–°–ø–∞—Å–∏–±–æ! üòä"]
        
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –∏–ª–∏ —à–∞–±–ª–æ–Ω
            if self.use_llm and self.llm:
                response = await self.llm.get_response(media_prompt, user_id)
            else:
                response = random.choice(fallback_responses)
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
            await update.message.reply_text("–ü–æ–ª—É—á–∏–ª–∞! üòä")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error("–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ:", exc_info=context.error)
        
        if update and update.message:
            await update.message.reply_text("–£–ø—Å! üôà –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!")