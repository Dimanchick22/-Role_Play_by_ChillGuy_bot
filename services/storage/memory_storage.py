"""–•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""

import logging
from typing import Dict, Optional
from datetime import datetime, timedelta
import uuid
import threading

from models.base import Conversation, User

logger = logging.getLogger(__name__)

class MemoryStorage:
    """–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏ —Å thread-safe –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏."""
    
    def __init__(self, max_conversations: int = 1000):
        self.conversations: Dict[int, Conversation] = {}
        self.max_conversations = max_conversations
        self._lock = threading.RLock()  # –†–µ–µ–Ω—Ç—Ä–∞–Ω—Ç–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è thread-safety
        
        logger.info(f"üíæ MemoryStorage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–º–∞–∫—Å. –¥–∏–∞–ª–æ–≥–æ–≤: {max_conversations})")
    
    def get_conversation(self, user_id: int) -> Conversation:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with self._lock:
            if user_id not in self.conversations:
                self.conversations[user_id] = Conversation(
                    id=str(uuid.uuid4()),
                    user_id=user_id,
                    messages=[],
                    created_at=datetime.now(),
                    updated_at=datetime.now(),
                    metadata={}
                )
                logger.debug(f"üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return self.conversations[user_id]
    
    def save_conversation(self, conversation: Conversation) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥."""
        with self._lock:
            conversation.updated_at = datetime.now()
            self.conversations[conversation.user_id] = conversation
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤
            if len(self.conversations) > self.max_conversations:
                self._cleanup_old_conversations()
            
            logger.debug(f"üíæ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {conversation.user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    def clear_conversation(self, user_id: int) -> None:
        """–û—á–∏—â–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with self._lock:
            if user_id in self.conversations:
                conversation = self.conversations[user_id]
                conversation.messages.clear()
                conversation.updated_at = datetime.now()
                logger.info(f"üßπ –û—á–∏—â–µ–Ω –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def delete_conversation(self, user_id: int) -> None:
        """–£–¥–∞–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        with self._lock:
            if user_id in self.conversations:
                del self.conversations[user_id]
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        with self._lock:
            total_messages = sum(
                len(conv.messages) 
                for conv in self.conversations.values()
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            now = datetime.now()
            active_today = sum(
                1 for conv in self.conversations.values()
                if (now - conv.updated_at).days < 1
            )
            
            return {
                "total_conversations": len(self.conversations),
                "total_messages": total_messages,
                "active_today": active_today,
                "max_conversations": self.max_conversations,
                "memory_usage_mb": self._estimate_memory_usage()
            }
    
    def cleanup_old_conversations(self, days_old: int = 7) -> int:
        """–£–¥–∞–ª—è–µ—Ç –¥–∏–∞–ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π."""
        with self._lock:
            cutoff_date = datetime.now() - timedelta(days=days_old)
            to_remove = []
            
            for user_id, conv in self.conversations.items():
                if conv.updated_at < cutoff_date:
                    to_remove.append(user_id)
            
            for user_id in to_remove:
                del self.conversations[user_id]
            
            if to_remove:
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {len(to_remove)} —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π)")
            
            return len(to_remove)
    
    def _cleanup_old_conversations(self) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∫–æ–≥–¥–∞ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç."""
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        sorted_conversations = sorted(
            self.conversations.items(),
            key=lambda x: x[1].updated_at
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –Ω–æ–≤—ã—Ö)
        to_remove = len(sorted_conversations) - self.max_conversations + 100
        
        if to_remove > 0:
            for user_id, _ in sorted_conversations[:to_remove]:
                del self.conversations[user_id]
            
            logger.info(f"üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {to_remove} —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
    
    def _estimate_memory_usage(self) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB."""
        try:
            import sys
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ª–∏ Python
            if sys.meta_path is None:
                return 0.0  # Python –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, –Ω–µ —Å—á–∏—Ç–∞–µ–º –ø–∞–º—è—Ç—å
            
            total_size = 0
            
            # –†–∞–∑–º–µ—Ä —Å–∞–º–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
            total_size += sys.getsizeof(self.conversations)
            
            # –†–∞–∑–º–µ—Ä –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            for conv in self.conversations.values():
                total_size += sys.getsizeof(conv)
                total_size += sum(sys.getsizeof(msg) for msg in conv.messages)
                total_size += sum(
                    sys.getsizeof(msg.content) + sys.getsizeof(msg.metadata)
                    for msg in conv.messages
                )
            
            return total_size / (1024 * 1024)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MB
            
        except Exception:
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            return 0.0
    
    def backup_to_dict(self) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è."""
        with self._lock:
            backup = {
                "conversations": {},
                "created_at": datetime.now().isoformat(),
                "stats": self.get_stats()
            }
            
            for user_id, conv in self.conversations.items():
                backup["conversations"][str(user_id)] = {
                    "id": conv.id,
                    "user_id": conv.user_id,
                    "created_at": conv.created_at.isoformat(),
                    "updated_at": conv.updated_at.isoformat(),
                    "messages": [
                        {
                            "id": msg.id,
                            "content": msg.content,
                            "role": msg.role.value,
                            "message_type": msg.message_type.value,
                            "timestamp": msg.timestamp.isoformat(),
                            "metadata": msg.metadata
                        }
                        for msg in conv.messages
                    ],
                    "metadata": conv.metadata
                }
            
            logger.info(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ({len(self.conversations)} –¥–∏–∞–ª–æ–≥–æ–≤)")
            return backup
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã."""
        with self._lock:
            stats = self.get_stats()
            logger.info(f"üßπ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
            self.conversations.clear()
            logger.info("üíæ MemoryStorage –æ—á–∏—â–µ–Ω")