"""–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞."""

import logging
import sys
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

from config import Config
from bot.character import Character
from bot.llm_client import LLMClient
from bot.handlers import BotHandlers
from bot.model_selector import ModelSelector, select_model_cli


def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=getattr(logging, Config.get_log_level()),
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler('bot.log', encoding='utf-8')
        ]
    )


def select_model() -> str:
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."""
    logger = logging.getLogger(__name__)
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∑–∞–¥–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ
    if Config.OLLAMA_MODEL and Config.OLLAMA_MODEL != "auto":
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {Config.OLLAMA_MODEL}")
        return Config.OLLAMA_MODEL
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä
    try:
        selector = ModelSelector()
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if Config.INTERACTIVE_MODEL_SELECT and sys.stdout.isatty():
            print("ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –±–æ—Ç–∞\n")
            selected = selector.select_interactive()
            if selected:
                return selected
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –º–æ–¥–µ–ª–∏
        recommended = selector.get_recommended_model()
        if recommended:
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {recommended.name}")
            return recommended.name
        
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª–µ–π –Ω–µ—Ç
        raise RuntimeError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏: {e}")
        raise


def create_llm_client() -> LLMClient:
    """–°–æ–∑–¥–∞–µ—Ç LLM –∫–ª–∏–µ–Ω—Ç —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏."""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
        model_name = select_model()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        llm = LLMClient(model_name, Config.MAX_HISTORY)
        logging.info(f"‚úÖ LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {model_name}")
        
        return llm
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è LLM: {e}")
        logging.info("–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ —à–∞–±–ª–æ–Ω–æ–≤")
        return None


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    character = Character()
    llm = create_llm_client() if Config.USE_LLM else None
    handlers = BotHandlers(character, llm)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(Config.BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", handlers.start))
    app.add_handler(CommandHandler("help", handlers.help_command))
    app.add_handler(CommandHandler("info", handlers.info_command))
    app.add_handler(CommandHandler("question", handlers.question_command))
    
    if llm:
        app.add_handler(CommandHandler("clear", handlers.clear_command))
        app.add_handler(CommandHandler("mode", handlers.mode_command))
        app.add_handler(CommandHandler("stats", handlers.stats_command))
        app.add_handler(CommandHandler("models", handlers.models_command))
        app.add_handler(CommandHandler("switch", handlers.switch_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handlers.handle_text
    ))
    app.add_handler(MessageHandler(
        ~filters.TEXT & ~filters.COMMAND,
        handlers.handle_media
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(handlers.error_handler)
    
    # –ó–∞–ø—É—Å–∫
    mode = "—Å LLM" if llm else "–≤ —Ä–µ–∂–∏–º–µ —à–∞–±–ª–æ–Ω–æ–≤"
    logger.info(f"ü§ñ –ë–æ—Ç {character.name} –∑–∞–ø—É—â–µ–Ω {mode}!")
    logger.info("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        app.run_polling()
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == '__main__':
    main()