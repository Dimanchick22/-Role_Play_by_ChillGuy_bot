"""–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –≤–µ—Ä—Å–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º."""

import asyncio
import logging
import sys
import signal
import platform
import threading
import time
import os
from typing import Optional

from config.logging_config import setup_logging
from config.settings import load_config
from core.application import TelegramBotApplication

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
app_instance: Optional[TelegramBotApplication] = None
running = False
shutdown_event = threading.Event()
force_exit = False

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
    global running, force_exit
    logging.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
    running = False
    shutdown_event.set()
    
    # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
    def force_shutdown():
        time.sleep(3)
        if not force_exit:
            logging.warning("üî™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
            os._exit(0)
    
    threading.Thread(target=force_shutdown, daemon=True).start()

async def run_app_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global app_instance, running, force_exit
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app_instance = TelegramBotApplication(config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if not await app_instance.initialize():
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
            return False
        
        logging.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É")
        running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        await app_instance.start()
        
        return True
            
    except KeyboardInterrupt:
        logging.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
        return True
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return False
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if app_instance:
            try:
                logging.info("üõë –ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                async def cleanup_with_timeout():
                    try:
                        await asyncio.wait_for(app_instance.stop(), timeout=2.0)
                    except asyncio.TimeoutError:
                        logging.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º")
                
                await cleanup_with_timeout()
                logging.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
        
        force_exit = True

def run_app():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop."""
    global running, shutdown_event, force_exit
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º event loop...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        success = loop.run_until_complete(run_app_async())
        
        if success:
            logging.info("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ")
        else:
            logging.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            
        return success
        
    except KeyboardInterrupt:
        logging.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        running = False
        return True
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}", exc_info=True)
        return False
    finally:
        force_exit = True
        try:
            # –ë—ã—Å—Ç—Ä–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop
            logging.info("üîÑ –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ event loop...")
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ
            pending_tasks = asyncio.all_tasks(loop)
            if pending_tasks:
                for task in pending_tasks:
                    task.cancel()
                
                # –î–∞–µ–º 1 —Å–µ–∫—É–Ω–¥—É –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                try:
                    loop.run_until_complete(
                        asyncio.wait_for(
                            asyncio.gather(*pending_tasks, return_exceptions=True),
                            timeout=1.0
                        )
                    )
                except asyncio.TimeoutError:
                    logging.warning("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á")
            
            loop.close()
            logging.info("üîö Event loop –∑–∞–∫—Ä—ã—Ç")
            
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è event loop: {e}")

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    if platform.system() != 'Windows':
        # –î–ª—è Unix-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        logging.info("üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã (Unix)")
    else:
        # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
        try:
            signal.signal(signal.SIGINT, signal_handler)
            logging.info("üì° –û–±—Ä–∞–±–æ—Ç—á–∏–∫ SIGINT –Ω–∞—Å—Ç—Ä–æ–µ–Ω (Windows)")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    global running, shutdown_event, force_exit
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º
        try:
            config = load_config()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –û–î–ò–ù –†–ê–ó
        setup_logging(config.log_level, config.debug)
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        logging.info(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}")
        logging.info(f"üêç Python: {platform.python_version()}")
        logging.info("‚ö†Ô∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        setup_signal_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        logging.info("üéØ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
        
        app_thread = threading.Thread(target=run_app, daemon=True)
        app_thread.start()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –∂–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ —Å–∏–≥–Ω–∞–ª–∞
        try:
            while app_thread.is_alive() and not shutdown_event.is_set() and not force_exit:
                time.sleep(0.1)  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        except KeyboardInterrupt:
            logging.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
            running = False
            shutdown_event.set()
        
        # –î–∞–µ–º –ø–æ—Ç–æ–∫—É 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if app_thread.is_alive() and not force_exit:
            logging.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            app_thread.join(timeout=2.0)
            
            if app_thread.is_alive():
                logging.warning("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã")
                logging.info("üî™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                force_exit = True
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not force_exit:
            force_exit = True
            
        logging.info("üëã –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ Python
        logging.info("üö™ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
        os._exit(0)
        
    except KeyboardInterrupt:
        logging.info("üëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (Ctrl+C)")
        running = False
        shutdown_event.set()
        force_exit = True
        os._exit(0)
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
        os._exit(1)

if __name__ == "__main__":
    main()