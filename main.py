import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from character import Character

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
character = Character()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.effective_user.first_name
    welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üåü\n\n{character.get_character_info()}"
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"""
ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

–ü—Ä–∏–≤–µ—Ç! –Ø {character.name}, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥! 

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/info - –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ
/question - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –æ—Ç–≤–µ—á—É! üí¨
–Ø —É–º–µ—é:
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É
‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã
‚Ä¢ –ü–æ–¥–Ω–∏–º–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚Ä¢ –ë—ã—Ç—å —Ö–æ—Ä–æ—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º

–î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è! üòä
    """
    await update.message.reply_text(help_text)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    info_text = character.get_character_info()
    await update.message.reply_text(info_text)

async def question_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
    question = character.get_random_question()
    await update.message.reply_text(question)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    user_name = update.effective_user.first_name
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    response = character.get_response(user_message, user_name)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}: {user_message}")
    logger.info(f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {response}")
    
    await update.message.reply_text(response)

async def handle_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
    responses = [
        "–û–π, –∫–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üòÑ",
        "–õ—é–±–ª—é —Å—Ç–∏–∫–µ—Ä—ã! ü§©",
        "–•–∞—Ö–∞, –∑–∞–±–∞–≤–Ω–æ! üòä",
        "–°—Ç–∏–∫–µ—Ä —Å—É–ø–µ—Ä! ‚ú®"
    ]
    import random
    response = random.choice(responses)
    await update.message.reply_text(response)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    responses = [
        "–û–≥–æ, –∫–ª–∞—Å—Å–Ω–æ–µ —Ñ–æ—Ç–æ! üì∏‚ú®",
        "–í–∞—É, –∫—Ä–∞—Å–∏–≤–æ! ü§©",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞! üòä",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! üåü"
    ]
    import random
    response = random.choice(responses)
    await update.message.reply_text(response)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    responses = [
        "–ü–æ–ª—É—á–∏–ª–∞ —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ! üé§ –ù–æ —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å üòÖ",
        "–°–ª—ã—à—É, —Å–ª—ã—à—É! üëÇ –ü—Ä–∞–≤–¥–∞, –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å üòä",
        "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üéµ –ñ–∞–ª—å, —á—Ç–æ –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–º üòÑ"
    ]
    import random
    response = random.choice(responses)
    await update.message.reply_text(response)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    if update and update.message:
        await update.message.reply_text(
            "–£–ø—Å! üôà –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
        )

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("question", question_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Sticker.ALL, handle_sticker))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.VOICE, handle_voice))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print(f"–ë–æ—Ç {character.name} –∑–∞–ø—É—â–µ–Ω! üåü")
    print("–ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling()

if __name__ == '__main__':
    main()