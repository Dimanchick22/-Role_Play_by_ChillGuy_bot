#!/usr/bin/env python3
"""–†–∞–±–æ—á–∏–π –±–æ—Ç –¥–ª—è Windows —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π event loop."""

import asyncio
import logging
import os
import platform
import signal
import threading
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
app_instance = None
running = False

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start."""
    user = update.effective_user
    logger.info(f"üì® START –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {user.first_name} ({user.id})")
    
    await update.message.reply_text(
        f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user = update.effective_user
    text = update.message.text
    
    logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({user.id}): {text}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action="typing"
    )
    
    # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    response = f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\nüîÑ –¢—ã –Ω–∞–ø–∏—Å–∞–ª: '{text}'\n\n‚ú® –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
    await update.message.reply_text(response)
    
    logger.info("üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")

def setup_application():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    
    logger.info("üîß –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    app = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)
    
    logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    return app

async def run_bot_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    global app_instance, running
    
    try:
        app_instance = setup_application()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
        bot_info = await app_instance.bot.get_me()
        logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç: @{bot_info.username}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        await app_instance.initialize()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º updater
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ updater...")
        await app_instance.updater.start_polling(
            drop_pending_updates=True,
            allowed_updates=["message", "callback_query"]
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        logger.info("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        await app_instance.start()
        
        running = True
        logger.info("üëÇ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!")
        
        # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            while running:
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            pass
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise
    finally:
        await cleanup()

async def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
    global app_instance, running
    
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    running = False
    
    if app_instance:
        try:
            logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ updater...")
            await app_instance.updater.stop()
            
            logger.info("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
            await app_instance.stop()
            
            logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            await app_instance.shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤."""
    global running
    logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ({signum})")
    running = False

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º event loop."""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è Unix)
    if platform.system() != 'Windows':
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º event loop...")
        loop.run_until_complete(run_bot_async())
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª Ctrl+C")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        try:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            pending = asyncio.all_tasks(loop)
            for task in pending:
                task.cancel()
            
            if pending:
                loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
            
            loop.close()
            logger.info("üîö Event loop –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è loop: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}")
    logger.info(f"üêç Python: {platform.python_version()}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å event loop
        bot_thread = threading.Thread(target=run_bot, daemon=True)
        bot_thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        bot_thread.join()
        
    except KeyboardInterrupt:
        logger.info("üëã –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()