"""–¢–µ—Å—Ç—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è."""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´
from characters.alice import AliceCharacter
from models.base import User


def create_test_user() -> User:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return User(
        id=12345,
        username="tester",
        first_name="–¢–µ—Å—Ç–µ—Ä",
        last_name="–¢–µ—Å—Ç–æ–≤–∏—á",
        language_code="ru",
        created_at=datetime.now(),
        last_seen=datetime.now(),
        is_premium=False
    )


def test_character_basic():
    """–ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    alice = AliceCharacter()
    test_user = create_test_user()
    
    print(f"=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {alice.name} ===\n")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    test_cases = [
        ("–ü—Ä–∏–≤–µ—Ç!", "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        ("–°–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"), 
        ("–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"),
        ("–ü–æ–∫–∞!", "–ø—Ä–æ—â–∞–Ω–∏–µ"),
        ("–ö–∞–∫ –¥–µ–ª–∞?", "–æ–±—â–µ–Ω–∏–µ")
    ]
    
    print("–¢–µ—Å—Ç—ã —à–∞–±–ª–æ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:")
    print("-" * 40)
    
    for i, (message, expected_type) in enumerate(test_cases, 1):
        response = alice.get_template_response(message, test_user.first_name)
        print(f"{i}. –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        print(f"   –û—Ç–≤–µ—Ç: {response}")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: {expected_type}")
        print()
    
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    print("=== –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ===")
    prompt = alice.get_system_prompt(test_user)
    print(f"–î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    print("–°–æ–¥–µ—Ä–∂–∏—Ç '—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ':", "—Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ" in prompt)
    print("–°–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", alice.name in prompt)
    print("–°–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", test_user.first_name in prompt)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    print("\n=== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===")
    print(f"–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {alice.get_random_question()}")
    
    # –¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    welcome = alice.get_welcome_message(test_user)
    print(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {welcome[:100]}...")


def test_edge_cases():
    """–¢–µ—Å—Ç—ã –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤."""
    alice = AliceCharacter()
    
    print("\n=== –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ ===")
    
    edge_cases = [
        "",  # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        "–ü–†–ò–í–ï–¢!!!",  # –ö–∞–ø—Å
        "–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞ —Å–ø–∞—Å–∏–±–æ",  # –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        "Hello world",  # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        "123456",  # –¶–∏—Ñ—Ä—ã
        "üòäüòäüòä"  # –¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏
    ]
    
    for message in edge_cases:
        response = alice.get_template_response(message, "–¢–µ—Å—Ç–µ—Ä")
        print(f"'{message}' -> '{response[:50]}...'")


def test_error_responses():
    """–¢–µ—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏."""
    alice = AliceCharacter()
    
    print("\n=== –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—à–∏–±–∫–∏ ===")
    error_responses = alice.get_error_responses()
    print(f"–î–æ—Å—Ç—É–ø–Ω–æ {len(error_responses)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏:")
    for i, response in enumerate(error_responses, 1):
        print(f"{i}. {response}")


if __name__ == "__main__":
    test_character_basic()
    test_edge_cases()
    test_error_responses()
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")