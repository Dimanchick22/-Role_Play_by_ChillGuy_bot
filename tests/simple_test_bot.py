#!/usr/bin/env python3
"""–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –¥–ª—è Windows."""

import asyncio
import logging
import os
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start."""
    logger.info(f"START –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {update.effective_user.first_name}")
    await update.message.reply_text("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user = update.effective_user
    text = update.message.text
    
    logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name}: {text}")
    
    response = f"–≠—Ö–æ: {text}"
    await update.message.reply_text(response)
    
    logger.info("üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞!")
        return
    
    print("üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
    app = Application.builder().token(token).build()
    
    print("üìù –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    bot_info = await app.bot.get_me()
    print(f"‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤: @{bot_info.username}")
    
    print("üëÇ –ó–∞–ø—É—Å–∫–∞–µ–º polling...")
    await app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üëã –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()