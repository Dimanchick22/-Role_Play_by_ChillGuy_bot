#!/usr/bin/env python3
"""–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –±–æ—Ç–∞ –¥–ª—è Windows –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ event loop."""

import asyncio
import logging
import os
import platform
import sys
import threading
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ path
sys.path.append(str(Path(__file__).parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows –ü–ï–†–ï–î –∏–º–ø–æ—Ä—Ç–æ–º telegram
if platform.system() == 'Windows':
    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())

from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('test_bot.log', encoding='utf-8')
    ]
)

logger = logging.getLogger(__name__)

class WindowsTestBot:
    """–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Windows."""
    
    def __init__(self):
        self.app = None
        self.running = False
        self._stop_event = threading.Event()
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start."""
        user = update.effective_user
        logger.info(f"üì® START –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {user.first_name} ({user.id})")
        
        await update.message.reply_text(
            f"ü§ñ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            f"‚úÖ Windows —Ç–µ—Å—Ç-–±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!\n"
            f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}\n"
            f"üêç Python: {platform.python_version()}\n\n"
            f"üìù –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞."
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help."""
        help_text = """üÜò –°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–µ—Å—Ç-–±–æ—Ç—É:

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/test - –¢–µ—Å—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
/stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞

üí¨ –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –æ—Ç–≤–µ—á—É!"""
        
        await update.message.reply_text(help_text)
    
    async def stop_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stop."""
        await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        self._stop_event.set()
        self.running = False
    
    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /test."""
        test_results = []
        
        # –¢–µ—Å—Ç 1: –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞
        test_results.append(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}")
        test_results.append(f"üêç Python: {platform.python_version()}")
        
        # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        bot_token = os.getenv("BOT_TOKEN")
        if bot_token:
            test_results.append("‚úÖ BOT_TOKEN –Ω–∞–π–¥–µ–Ω")
        else:
            test_results.append("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç 3: Event loop
        loop = asyncio.get_event_loop()
        test_results.append(f"üîÑ Event loop: {type(loop).__name__}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        try:
            test_file = Path("test_write.tmp")
            test_file.write_text("test")
            test_file.unlink()
            test_results.append("‚úÖ –ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏: OK")
        except Exception as e:
            test_results.append(f"‚ùå –ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏: {e}")
        
        # –¢–µ—Å—Ç 5: –ö–æ–¥–∏—Ä–æ–≤–∫–∞
        try:
            "—Ç–µ—Å—Ç".encode('utf-8')
            test_results.append("‚úÖ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∞: OK")
        except:
            test_results.append("‚ùå UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–∞: –û–®–ò–ë–ö–ê")
        
        result_text = "üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n\n" + "\n".join(test_results)
        await update.message.reply_text(result_text)
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /info."""
        info_lines = [
            f"üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}",
            f"üêç Python: {platform.python_version()}",
            f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}",
            f"üîÑ Event loop policy: {type(asyncio.get_event_loop_policy()).__name__}",
            f"üåê –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {sys.getdefaultencoding()}",
            f"üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: test_bot.log"
        ]
        
        info_text = "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:\n\n" + "\n".join(info_lines)
        await update.message.reply_text(info_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        user = update.effective_user
        message_text = update.message.text
        
        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({user.id}): {message_text}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action="typing"
        )
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        await asyncio.sleep(1)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
        responses = [
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!",
            f"üìù –¢—ã –Ω–∞–ø–∏—Å–∞–ª: '{message_text}'",
            f"‚úÖ Windows –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!",
            f"üïê –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ~1 —Å–µ–∫—É–Ω–¥–∞"
        ]
        
        response = "\n\n".join(responses)
        await update.message.reply_text(response)
        
        logger.info("üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        
        if update and update.message:
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥–∞—Ö."
                )
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def setup_application(self) -> Application:
        """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
        token = os.getenv("BOT_TOKEN")
        if not token:
            raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        logger.info("üîß –°–æ–∑–¥–∞–µ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Windows
        app = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("test", self.test_command))
        app.add_handler(CommandHandler("info", self.info_command))
        app.add_handler(CommandHandler("stop", self.stop_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        app.add_error_handler(self.error_handler)
        
        logger.info("üìù –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return app
    
    async def run_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.app = self.setup_application()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            logger.info("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
            bot_info = await self.app.bot.get_me()
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç: @{bot_info.username}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.app.initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º updater –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ updater...")
            await self.app.updater.start_polling(drop_pending_updates=True)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.app.start()
            
            self.running = True
            logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –∂–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            try:
                while self.running and not self._stop_event.is_set():
                    await asyncio.sleep(1)
            except asyncio.CancelledError:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            raise
        finally:
            await self._cleanup()
    
    async def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        if self.app:
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º updater
                if hasattr(self.app, 'updater') and self.app.updater.running:
                    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ updater...")
                    await self.app.updater.stop()
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                logger.info("üîå –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                await self.app.stop()
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É
                logger.info("üîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                await self.app.shutdown()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        self.running = False
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def run_in_thread():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    bot = WindowsTestBot()
    
    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –Ω–æ–≤–æ–º event loop...")
        loop.run_until_complete(bot.run_async())
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª Ctrl+C")
        bot.running = False
        bot._stop_event.set()
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        try:
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop
            pending = asyncio.all_tasks(loop)
            if pending:
                logger.info(f"üìã –û—Ç–º–µ–Ω–∞ {len(pending)} –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
                for task in pending:
                    task.cancel()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                loop.run_until_complete(
                    asyncio.gather(*pending, return_exceptions=True)
                )
            
            loop.close()
            logger.info("üîö Event loop –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è loop: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ Windows —Ç–µ—Å—Ç-–±–æ—Ç–∞...")
    print(f"üñ•Ô∏è –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()}")
    print(f"üêç Python: {platform.python_version()}")
    print("üìù –õ–æ–≥–∏: test_bot.log")
    print("‚ö†Ô∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("-" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ event loop
    bot_thread = threading.Thread(target=run_in_thread, daemon=False)
    bot_thread.start()
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        while bot_thread.is_alive():
            bot_thread.join(timeout=1.0)
    except KeyboardInterrupt:
        print("\n‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω Ctrl+C, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    
    # –ñ–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
    if bot_thread.is_alive():
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—Ç–∞...")
        bot_thread.join(timeout=10.0)
        
        if bot_thread.is_alive():
            print("‚ö†Ô∏è –ü–æ—Ç–æ–∫ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 10 —Å–µ–∫—É–Ω–¥")
    
    print("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()