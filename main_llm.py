import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from config import BOT_TOKEN
from character import Character
from llm_handler import LLMHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ LLM
character = Character()
llm = LLMHandler(model_name="dolphin3:latest")  # –ò–∑–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ—é –º–æ–¥–µ–ª—å

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
llm.set_system_prompt(character.get_llm_prompt())

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
USE_LLM = True  # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É LLM –∏ —à–∞–±–ª–æ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = update.effective_user.first_name
    user_id = update.effective_user.id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    personalized_prompt = character.get_llm_prompt(user_name)
    llm.set_system_prompt(personalized_prompt)
    
    welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üåü\n\n{character.get_character_info()}"
    
    if USE_LLM:
        welcome_message += "\n\nü§ñ –†–µ–∂–∏–º: –£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (LLM –≤–∫–ª—é—á–µ–Ω–∞)"
    else:
        welcome_message += "\n\nüìù –†–µ–∂–∏–º: –®–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"
    
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = f"""
ü§ñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É

–ü—Ä–∏–≤–µ—Ç! –Ø {character.name}, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –¥—Ä—É–≥! 

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –º–Ω–æ–π
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/info - –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–±–æ –º–Ω–µ
/question - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å
/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
/mode - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤
/model - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ —è –æ—Ç–≤–µ—á—É! üí¨

–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {"ü§ñ LLM (—É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)" if USE_LLM else "üìù –®–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"}
    """
    await update.message.reply_text(help_text)

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    info_text = character.get_character_info()
    await update.message.reply_text(info_text)

async def question_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /question"""
    question = character.get_random_question()
    await update.message.reply_text(question)

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    user_id = update.effective_user.id
    llm.clear_history(user_id)
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞! üßπ‚ú®")

async def mode_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    global USE_LLM
    USE_LLM = not USE_LLM
    
    mode_text = "ü§ñ LLM (—É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã)" if USE_LLM else "üìù –®–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"
    await update.message.reply_text(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode_text}")

async def model_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏"""
    model_info = llm.get_model_info()
    info_text = f"""
ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:

–ù–∞–∑–≤–∞–Ω–∏–µ: {model_info['name']}
–†–∞–∑–º–µ—Ä: {model_info['size']}
–ò–∑–º–µ–Ω–µ–Ω–∞: {model_info['modified']}

–ú–∞–∫—Å–∏–º—É–º –∏—Å—Ç–æ—Ä–∏–∏: {llm.max_history} —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    await update.message.reply_text(info_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_message = update.message.text
    user_name = update.effective_user.first_name
    user_id = update.effective_user.id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        if USE_LLM:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            response = await llm.get_response(user_message, user_id, user_name)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            response = character.get_response(user_message, user_name)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_id}): {user_message}")
        logger.info(f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª ({'LLM' if USE_LLM else 'Template'}): {response}")
        
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        error_response = "–£–ø—Å! üôà –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
        await update.message.reply_text(error_response)

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    if update.message.sticker:
        media_type = "—Å—Ç–∏–∫–µ—Ä"
        user_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Å—Ç–∏–∫–µ—Ä"
    elif update.message.photo:
        media_type = "—Ñ–æ—Ç–æ"
        user_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ"
    elif update.message.voice:
        media_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        user_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    elif update.message.video:
        media_type = "–≤–∏–¥–µ–æ"
        user_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ"
    elif update.message.document:
        media_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
        user_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç"
    else:
        media_type = "–º–µ–¥–∏–∞-—Ñ–∞–π–ª"
        user_message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –º–µ–¥–∏–∞-—Ñ–∞–π–ª"
    
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        if USE_LLM:
            # LLM –º–æ–∂–µ—Ç –¥–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞
            response = await llm.get_response(user_message, user_id, user_name)
        else:
            # –®–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –º–µ–¥–∏–∞
            if "—Å—Ç–∏–∫–µ—Ä" in media_type:
                responses = ["–û–π, –∫–ª–∞—Å—Å–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! üòÑ", "–õ—é–±–ª—é —Å—Ç–∏–∫–µ—Ä—ã! ü§©", "–•–∞—Ö–∞, –∑–∞–±–∞–≤–Ω–æ! üòä"]
            elif "—Ñ–æ—Ç–æ" in media_type:
                responses = ["–û–≥–æ, –∫–ª–∞—Å—Å–Ω–æ–µ —Ñ–æ—Ç–æ! üì∏‚ú®", "–í–∞—É, –∫—Ä–∞—Å–∏–≤–æ! ü§©", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞! üòä"]
            elif "–≥–æ–ª–æ—Å–æ–≤–æ–µ" in media_type:
                responses = ["–ü–æ–ª—É—á–∏–ª–∞ —Ç–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ! üé§ –ù–æ —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∏—Ö —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å üòÖ"]
            else:
                responses = ["–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üòä", "–ü–æ–ª—É—á–∏–ª–∞! üëç", "–ö–ª–∞—Å—Å–Ω–æ! ‚ú®"]
            
            import random
            response = random.choice(responses)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} –æ—Ç–ø—Ä–∞–≤–∏–ª {media_type}")
        logger.info(f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª: {response}")
        
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞: {e}")
        await update.message.reply_text("–ü–æ–ª—É—á–∏–ª–∞! üòä")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(msg="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)
    
    if update and update.message:
        await update.message.reply_text("–£–ø—Å! üôà –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    application.add_handler(CommandHandler("question", question_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(CommandHandler("mode", mode_command))
    application.add_handler(CommandHandler("model", model_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–¥–∏–∞
    application.add_handler(MessageHandler(~filters.TEXT & ~filters.COMMAND, handle_media))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print(f"ü§ñ –ë–æ—Ç {character.name} –∑–∞–ø—É—â–µ–Ω —Å LLM –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π!")
    print(f"üìã –ú–æ–¥–µ–ª—å: {llm.model_name}")
    print(f"üéØ –†–µ–∂–∏–º: {'LLM' if USE_LLM else '–®–∞–±–ª–æ–Ω—ã'}")
    print("–ù–∞–∂–º–∏ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    application.run_polling()

if __name__ == '__main__':
    main()